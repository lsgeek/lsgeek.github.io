{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/Staticfile","path":"Staticfile","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/uploads/avatar.png","path":"uploads/avatar.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476947310000},{"_id":"source/CNAME","hash":"5361f02d48aa436223c889e873058c22bc9314bf","modified":1476943187000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1491882078000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1491882078000},{"_id":"source/.DS_Store","hash":"095fc73f93dd19ed35b6e79e1806da3f26a9059f","modified":1491880560000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1491882078000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1491882078000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1491882078000},{"_id":"source/baidu_verify_lIs5ETBkQx.html","hash":"e2c18614aadf006fe4750b5cbdf4ca908546fbd3","modified":1477292575000},{"_id":"themes/next/.DS_Store","hash":"97b4e04953d06ab1341269b3bb8e7e98524a2dfe","modified":1491883089000},{"_id":"themes/next/_config.yml","hash":"26ba64244fbd4c7649757f0db9b4fc0b10d0604e","modified":1491885172000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1491882078000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1491882078000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1491882078000},{"_id":"themes/next/gulpfile.coffee","hash":"d267332ec1461042fb16a9cb0737e1555fb4b79e","modified":1491882078000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1491882078000},{"_id":"source/_posts/hello-world.md","hash":"bb08512edec8893bb2acdea24a06fda69ccfa7fe","modified":1476875559000},{"_id":"source/_posts/iosweaks.md","hash":"350fb4e0e841a101e64010f520575d05549d4242","modified":1491472364000},{"_id":"source/categories/index.md","hash":"6dac2f1068605b1e51dc6e6c21d7203876e518e7","modified":1476875797000},{"_id":"source/_posts/iOS-load-methodDes.md","hash":"bf30763605684174368b9fdcb55ac65077057e14","modified":1488967754000},{"_id":"source/tags/index.md","hash":"d6b25b88336524d9d1d6e4ea755de469e078d440","modified":1476875786000},{"_id":"source/uploads/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1476965666000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1491882078000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1491882078000},{"_id":"themes/next/languages/en.yml","hash":"63de36e9f5822084b61b03a507f6246f8f962b3f","modified":1491882078000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1491882078000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1491882078000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1491882078000},{"_id":"themes/next/languages/ko.yml","hash":"ce8b047c89daae77c03482fc76f16ffec6bdbf2d","modified":1491882078000},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1491882078000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1491882078000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1491882078000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3f7ecd2189afc36ed5ecdaebdeae6fafe362acd9","modified":1491882078000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1491882078000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1491882078000},{"_id":"themes/next/layout/.DS_Store","hash":"3846e5ec0495b1629bd13b6539ee80f6793487d7","modified":1491882693000},{"_id":"themes/next/layout/_layout.swig","hash":"627aa021dd052d3700e84f8c2eeabd4e30989158","modified":1491882078000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1491882078000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1491882078000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1491882078000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1491882078000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1491882078000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1491882078000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1491882078000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1491882078000},{"_id":"themes/next/source/.DS_Store","hash":"3037d5331d92d3f549f33102664cadfff9459707","modified":1491883095000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1476870908000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1491882078000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1491882078000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476870908000},{"_id":"source/uploads/avatar.png","hash":"b2deb2fae5905f4f536cc13c3427366d317ec8fb","modified":1476965652000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"bc311e9f4333188da5c9c721ae467ba14410d5b2","modified":1491882078000},{"_id":"themes/next/layout/_macro/post.swig","hash":"edd1a74e3f31605920230e3e9e0a15ba4316912f","modified":1491882633000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1491882078000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"084867c289c95c5ebc18435a3b2092091bb8e2ba","modified":1491882078000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1491882078000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5771fa25113d5f7994ca6846f88dca5556b66c58","modified":1491882806000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1476870908000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"40bbbdcae58865553d99c3f05d91bf7fe990d2fa","modified":1491882078000},{"_id":"themes/next/layout/_partials/head.swig","hash":"06b6604176367af52587312e2575b52ecf53c3d9","modified":1491882078000},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1491882078000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1491882078000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1491882078000},{"_id":"themes/next/layout/_scripts/.DS_Store","hash":"0d8e15a88d6febfb1b2fc72d885e2ffb7f18d4d9","modified":1491882847000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1476870908000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1491882078000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1491882078000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1491882078000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1491882078000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1491882078000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1491882078000},{"_id":"themes/next/source/css/.DS_Store","hash":"23b73227db54ddfe7ede13cd9b8bfdd4c8367219","modified":1491883095000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1491882078000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1491882078000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1491882078000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1491882078000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1491882078000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1491882078000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1491882078000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1491882078000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1491882078000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1491882078000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1491882078000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1491882078000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1491882078000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1491882078000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491882078000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491882078000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491882078000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491882078000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491882078000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491882078000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491882078000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1491882078000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1491882078000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1491882078000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1491882078000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1491882078000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1491882078000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1491882078000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1491882078000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1491882078000},{"_id":"themes/next/layout/_scripts/third-party/.DS_Store","hash":"0e73aadb77f64bb6422780f04c83cece84f1bea4","modified":1491882857000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1476870908000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"00fff82aa6e14348242222750186e78de63d0a2b","modified":1491882861000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1476870908000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"60a51a33416e2b86ac9fbefc86b80f2f5f60e1c0","modified":1476870908000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1476870908000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1476870908000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1476870908000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1491882078000},{"_id":"themes/next/source/css/_common/.DS_Store","hash":"c08e3427b7cae126fe16eeaf7e3d3d3be6e96e08","modified":1491883101000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1491882078000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1491882078000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1491882078000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1491882078000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1491882078000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"3f0d6aa424f434e82ea507f740eeff110f996269","modified":1491882078000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1491882078000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1491882078000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1491882078000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1491882078000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1491882078000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1491882078000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1491882078000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1476870908000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1476870908000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1476870908000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1476870908000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1476870908000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1476870908000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1476870908000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1476870908000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1476870908000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1476870908000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1476870908000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1476870908000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1476870908000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1476870908000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1476870908000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1476870908000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1476870908000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1476870908000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1476870908000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1476870908000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1476870908000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1476870908000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1476870908000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1476870908000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1476870908000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1476870908000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1476870908000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1476870908000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1476870908000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1476870908000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"3065c1bcb54da1e0018136595741341ac71ef9e7","modified":1476870908000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1476870908000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"1f543008333466de79b8be01c349d8ce6b5dd9e7","modified":1491882961000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1491882078000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1491882078000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1491882078000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1491882078000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1491882078000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1491882078000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1491882078000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1491882078000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1491882078000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1491882078000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1491882078000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1491882078000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1491882078000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1491882078000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1491882078000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1491882078000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1491882078000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1491882078000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1491882078000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1491882078000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"7b206cd8921bc042f8e37a74aea1abc8a5ec8ab4","modified":1491882078000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1476870908000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1491882078000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1491882078000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1491882078000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1491882078000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1491882078000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1476870908000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1476870908000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1476870908000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1476870908000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1476870908000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1476870908000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1476870908000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1476870908000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1476870908000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1476870908000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1476870908000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1476870908000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1476870908000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1476870908000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1476870908000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1476870908000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1476870908000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1476870908000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1476870908000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1476870908000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1476870908000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"525e502607cd70792ec9cd37b8a4141bd5ba5f34","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"d23db2f598b8eb274680023745ba6d6d466cd84a","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1476870908000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1491883043000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1491882078000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"4384164b1d9fd2d7b2a9fcf61644ba5eed2a724f","modified":1491883121000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1491882078000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1491882078000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1491882078000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1476870908000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1476870908000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1476870908000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1476870908000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1476870908000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1476870908000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1476870908000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1476870908000},{"_id":"public/atom.xml","hash":"0db4243d0564529de6c01dbd307243c1a72fa69a","modified":1491885185115},{"_id":"public/search.xml","hash":"56fa30e6248239cb3c97d3eec942aa5b58e1b1c8","modified":1491885185119},{"_id":"public/sitemap.xml","hash":"93984000a9be1032daba31e0a68c40628455f527","modified":1491885185120},{"_id":"public/baidu_verify_lIs5ETBkQx.html","hash":"5f10e1a8dc8e20be322f44e74a7e8a106976b55d","modified":1491885266857},{"_id":"public/categories/index.html","hash":"bc942f891428f87951472ef358b47f681f27531c","modified":1491885266857},{"_id":"public/tags/index.html","hash":"a4b8fe376cc87b1136bd77b1eb1c0f8e8b37be8d","modified":1491885266857},{"_id":"public/2017/04/06/iosweaks/index.html","hash":"afd35e889668a2f1cc29ab5fe07dbd34cffe2ed6","modified":1491885266857},{"_id":"public/2017/03/08/iOS-load-methodDes/index.html","hash":"71287b196326c5a77efed53cb0b84680a97732bb","modified":1491885266857},{"_id":"public/2016/10/18/hello-world/index.html","hash":"ece042e48620df53721d20f4492187cbc9ef90d9","modified":1491885266857},{"_id":"public/archives/index.html","hash":"0024c3b99890404fe4831bbf057906b94ee2efb9","modified":1491885266858},{"_id":"public/archives/2016/index.html","hash":"b5d5bb160bdf5fa2e0484b89664b3036086c225f","modified":1491885266858},{"_id":"public/archives/2016/10/index.html","hash":"3010b1c60d24aaa6810ca9585f46067ff80ab852","modified":1491885266858},{"_id":"public/archives/2017/index.html","hash":"5012272a1fcb2f654b9dbd492f68fe8a3b8b8d1a","modified":1491885266858},{"_id":"public/archives/2017/03/index.html","hash":"a696eabdf4d6e72eca72a4058308ebf4e021e839","modified":1491885266858},{"_id":"public/archives/2017/04/index.html","hash":"653443beb3e612dde15bee90cf56a51f4156f8cf","modified":1491885266858},{"_id":"public/categories/Hello-World/index.html","hash":"39eb090b2576d47b5369db0dfd75d51ea878399d","modified":1491885266858},{"_id":"public/categories/iOS/index.html","hash":"d945cdde0d9300b6433cdfdea27e17c92e9efcfc","modified":1491885266858},{"_id":"public/index.html","hash":"7dc258026994c2b58c5d2bb931b84f35ca3d4081","modified":1491885266858},{"_id":"public/tags/Hello-World/index.html","hash":"89e8511ee7a6a174f19dfd693d1a470b4d4bc270","modified":1491885266858},{"_id":"public/tags/iOS/index.html","hash":"64845cb905f0f6d7834d164dfdc61919f6dbaef6","modified":1491885266858},{"_id":"public/tags/Runtime/index.html","hash":"3fb2f6466975a25c271345d43acc3ea5ce5d9577","modified":1491885266858},{"_id":"public/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491885185138},{"_id":"public/CNAME","hash":"5361f02d48aa436223c889e873058c22bc9314bf","modified":1491885185151},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1491885185151},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1491885185151},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1491885185151},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1491885185151},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1491885185151},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1491885185152},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1491885185152},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1491885185152},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1491885185152},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1491885185152},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1491885185152},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1491885185152},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1491885185153},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1491885185153},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1491885185153},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1491885185154},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1491885185154},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1491885185154},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1491885185154},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1491885185154},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1491885185154},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1491885185154},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1491885185154},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1491885185154},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1491885185969},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1491885185976},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1491885185977},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1491885185982},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1491885185982},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1491885185982},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1491885185982},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1491885185982},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1491885185983},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1491885185983},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1491885185983},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1491885185983},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1491885185983},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1491885185983},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1491885185983},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1491885185983},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1491885185983},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1491885185983},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1491885185983},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1491885185983},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1491885185983},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1491885185983},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1491885185983},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1491885185983},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1491885185983},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1491885185983},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1491885185983},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1491885185983},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1491885185983},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1491885185983},{"_id":"public/css/main.css","hash":"3e472fc47649f638c3ee8701a02dcc0c338d7a61","modified":1491885185983},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1491885185983},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1491885185983},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1491885185983},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1491885185983},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1491885185983},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1491885185983},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1491885185984},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1491885185984},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1491885185984},{"_id":"public/uploads/avatar.png","hash":"b2deb2fae5905f4f536cc13c3427366d317ec8fb","modified":1491885185984},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1491885185984},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1491885185988}],"Category":[{"name":"Hello World","_id":"cj1d1x3460005p36dcffermm1"},{"name":"iOS","_id":"cj1d1x34b0008p36dppx3cowl"}],"Data":[],"Page":[{"_content":"lIs5ETBkQx","source":"baidu_verify_lIs5ETBkQx.html","raw":"lIs5ETBkQx","date":"2016-10-24T07:03:14.000Z","updated":"2016-10-24T07:02:55.000Z","path":"baidu_verify_lIs5ETBkQx.html","title":"","comments":1,"layout":"page","_id":"cj1d1x32w0000p36d0mdediny","content":"lIs5ETBkQx","excerpt":"","more":"lIs5ETBkQx"},{"title":"categories","date":"2016-10-19T10:40:04.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-10-19 18:40:04\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-10-19T11:16:37.000Z","path":"categories/index.html","layout":"page","_id":"cj1d1x3400002p36dmtop6k35","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-10-19T10:39:34.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-10-19 18:39:34\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-10-19T11:16:26.000Z","path":"tags/index.html","layout":"page","_id":"cj1d1x3450004p36dzoibz5ra","content":"","excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ncategories: Hello World\ntags:\n  - Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-10-18T03:25:02.000Z","updated":"2016-10-19T11:12:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d1x33w0001p36dc0bgevu8","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"iOS大解密之Weak引用","date":"2017-04-06T09:23:32.000Z","_content":"\n## 引言\nassign与weak有什么区别？面试的时候常常会被问到此问题，我们会回答weak修饰在对象释放时会自动变为nil,那么底层是怎么实现的呢？今天让我们来探讨一下，本文使用的runtime源码为大神提供的可编译版本[objc4-706](https://github.com/isaacselement/objc4-706)\n\n## storeWeak...\n\n与weak相关的操作，应该都调用了次方法，稍后看一下这个方法的实现，首先做一下准备工作\n\n我首先在项目中定义了两个类Person、Like实现如下\n\n``` C++\n@interface Person : NSObject\n@property (atomic,weak) Like *like;\n- (void)logLikeAddress;\n@end\n\n@implementation Person\n- (void)logLikeAddress\n{\n    printf(\"%p\",&_like);\n}\n@end\n\n// Like其实什么也没实现😂\n@interface Like : NSObject\n@end\n@implementation Like\n@end\n\n```\n\n其中main函数为\n\n``` C++\nvoid addLike(Person* person)\n{\n    Like *like = [[Like alloc] init];\n    printf(\"%p\\n\",like);\n    [person logLikeAddress];\n    person.like = like;\n}\n\nint main(int argc, const char * argv[])\n{\n    @autoreleasepool {\n        // insert code here...\n        Person *person = [[Person alloc] init];\n        addLike(person);\n\n    }\n    return 0;\n}\n```\n\n准备工作已经就绪了，我们在`Person`的中`weak`修饰的属性下断点，并单步调试，会发现如下的函数调用栈\n\n![](http://omhkfini5.bkt.clouddn.com/b2.png)\n\n我们发现了关键的函数`objc_storeWeak(...)`,下面我们要详细的探讨这一函数\n\n``` C++\ntemplate <bool HaveOld, bool HaveNew, bool CrashIfDeallocating>\nstatic id \nstoreWeak(id *location, objc_object *newObj)\n{\n    assert(HaveOld  ||  HaveNew);\n    if (!HaveNew) assert(newObj == nil);\n\n    Class previouslyInitializedClass = nil;\n    id oldObj;\n    // 新旧引用表创建\n    SideTable *oldTable;\n    SideTable *newTable;\n\n    // Acquire locks for old and new values.\n    // Order by lock address to prevent lock ordering problems. \n    // Retry if the old value changes underneath us.\n retry:\n    if (HaveOld) {\n        // 获取旧引用表\n        oldObj = *location;\n        oldTable = &SideTables()[oldObj];\n    } else {\n        oldTable = nil;\n    }\n    if (HaveNew) {\n        // 获取新引用表\n        newTable = &SideTables()[newObj];\n    } else {\n        newTable = nil;\n    }\n    // 加锁\n    SideTable::lockTwo<HaveOld, HaveNew>(oldTable, newTable);\n    // location 应该与 oldObj 保持一致，否则重新获取\n    if (HaveOld  &&  *location != oldObj) {\n        SideTable::unlockTwo<HaveOld, HaveNew>(oldTable, newTable);\n        goto retry;\n    }\n\n    // Prevent a deadlock between the weak reference machinery\n    // and the +initialize machinery by ensuring that no \n    // weakly-referenced object has an un-+initialized isa.\n    if (HaveNew  &&  newObj) {\n        Class cls = newObj->getIsa();\n        if (cls != previouslyInitializedClass  &&  \n            !((objc_class *)cls)->isInitialized()) \n        {\n            SideTable::unlockTwo<HaveOld, HaveNew>(oldTable, newTable);\n            _class_initialize(_class_getNonMetaClass(cls, (id)newObj));\n\n            // If this class is finished with +initialize then we're good.\n            // If this class is still running +initialize on this thread \n            // (i.e. +initialize called storeWeak on an instance of itself)\n            // then we may proceed but it will appear initializing and \n            // not yet initialized to the check above.\n            // Instead set previouslyInitializedClass to recognize it on retry.\n            previouslyInitializedClass = cls;\n\n            goto retry;\n        }\n    }\n\n    // Clean up old value, if any. 清除旧值\n    if (HaveOld) {\n        weak_unregister_no_lock(&oldTable->weak_table, oldObj, location);\n    }\n\n    // Assign new value, if any. 设置新值\n    if (HaveNew) {\n        newObj = (objc_object *)weak_register_no_lock(&newTable->weak_table, \n                                                      (id)newObj, location, \n                                                      CrashIfDeallocating);\n        // weak_register_no_lock returns nil if weak store should be rejected\n\n        // Set is-weakly-referenced bit in refcount table.\n        if (newObj  &&  !newObj->isTaggedPointer()) {\n            // 标记该对象是一个弱引用\n            newObj->setWeaklyReferenced_nolock();\n        }\n\n        // Do not set *location anywhere else. That would introduce a race.\n        *location = (id)newObj;\n    }\n    else {\n        // No new value. The storage is not changed.\n    }\n    \n    SideTable::unlockTwo<HaveOld, HaveNew>(oldTable, newTable);\n\n    return (id)newObj;\n}\n\n```\n\n在此方法中，我们可以看见一些关键点， `SideTable`， `weak_unregister_no_lock(...)`， `weak_register_no_lock（...）`，下面我们会逐一介绍\n\n## 引用计数和弱引用依赖表 SideTable\nSideTable 是一个结构体，主要用于管理对象的引用计数和 weak 表。在 NSObject.mm 中声明其数据结构\n\n``` C++\nstruct SideTable {\n    //自旋锁\n    spinlock_t slock;\n    // 引用计数表\n    RefcountMap refcnts;\n    // 弱引用表\n    weak_table_t weak_table;\n\n    SideTable() {\n        memset(&weak_table, 0, sizeof(weak_table));\n    }\n\n    ~SideTable() {\n        _objc_fatal(\"Do not delete SideTable.\");\n    }\n\n    void lock() { slock.lock(); }\n    void unlock() { slock.unlock(); }\n\n    // Address-ordered lock discipline for a pair of side tables.\n\n    template<bool HaveOld, bool HaveNew>\n    static void lockTwo(SideTable *lock1, SideTable *lock2);\n    template<bool HaveOld, bool HaveNew>\n    static void unlockTwo(SideTable *lock1, SideTable *lock2);\n};\n```\n\n对于该结构体中的`slock`,`refcnts`,暂时我们不做讨论，我们主要讨论与弱引用相关的`weak_table`作用，其中`weak_table_t`的结构如下\n\n``` C++\nstruct weak_table_t {\n    // 保存了所有指向指定对象的 weak 指针\n    weak_entry_t *weak_entries;\n    // 存储空间\n    size_t    num_entries;\n    // 参与判断引用计数辅助量\n    uintptr_t mask;\n    // hash key 最大偏移值\n    uintptr_t max_hash_displacement;\n};\n```\n\n这是一个全局弱引用表。使用不定类型对象的地址作为 key ，用`weak_entry_t`类型结构体对象作为value。其中的`weak_entries`成员，从字面意思上看，即为弱引用表入口。其实现也是这样的\n\n``` C++\n#define WEAK_INLINE_COUNT 4\n#define REFERRERS_OUT_OF_LINE 2\nstruct weak_entry_t {\n    DisguisedPtr<objc_object> referent;\n    union {\n        struct {\n            weak_referrer_t *referrers;\n            uintptr_t        out_of_line_ness : 2;\n            uintptr_t        num_refs : PTR_MINUS_2;\n            uintptr_t        mask;\n            uintptr_t        max_hash_displacement;\n        };\n        struct {\n            // out_of_line_ness field is low bits of inline_referrers[1]\n            weak_referrer_t  inline_referrers[WEAK_INLINE_COUNT];\n        };\n    };\n\n    bool out_of_line() {\n        return (out_of_line_ness == REFERRERS_OUT_OF_LINE);\n    }\n\n    weak_entry_t& operator=(const weak_entry_t& other) {\n        memcpy(this, &other, sizeof(other));\n        return *this;\n    }\n\n    weak_entry_t(objc_object *newReferent, objc_object **newReferrer)\n        : referent(newReferent)\n    {\n        inline_referrers[0] = newReferrer;\n        for (int i = 1; i < WEAK_INLINE_COUNT; i++) {\n            inline_referrers[i] = nil;\n        }\n    }\n};\n```\n\n让我们回到`storeWeak(...)`函数中，获取`oldTable`,与`newTable`,发现调用的函数为`&SideTables()[newObj]`,`&SideTables()[oldObj]`,其中该方法的实现为\n\n``` C++\nalignas(StripedMap<SideTable>) static uint8_t SideTableBuf[sizeof(StripedMap<SideTable>)];\n\nstatic void SideTableInit() {\n    new (SideTableBuf) StripedMap<SideTable>();\n}\n\nstatic StripedMap<SideTable>& SideTables() {\n    return *reinterpret_cast<StripedMap<SideTable>*>(SideTableBuf);\n}\n```\n\n``` C++\ntemplate<typename T>\nclass StripedMap {\n\n    enum { CacheLineSize = 64 };\n\n#if TARGET_OS_EMBEDDED\n    enum { StripeCount = 8 };\n#else\n    enum { StripeCount = 64 };\n#endif\n\n    struct PaddedT {\n        T value alignas(CacheLineSize);\n    };\n\n    PaddedT array[StripeCount];\n\n    static unsigned int indexForPointer(const void *p) {\n        uintptr_t addr = reinterpret_cast<uintptr_t>(p);\n        return ((addr >> 4) ^ (addr >> 9)) % StripeCount;\n    }\n\n public:\n    T& operator[] (const void *p) { \n        return array[indexForPointer(p)].value; \n    }\n    const T& operator[] (const void *p) const { \n        return const_cast<StripedMap<T>>(this)[p]; \n    }\n};\n```\n\n在上面我们可以看出`StripedMap`是一个模板类（Template Class），通过传入类（结构体）参数，会动态修改在该类中的一个 array 成员存储的元素类型，并且其中提供了一个针对于地址的 hash 算法，用作存储key。可以说， `StripedMap` 提供了一套拥有将地址作为 key 的 hash table 解决方案，而该方案采用了模板类，是拥有泛型性的,在这个类中有一个 array 成员，用来存储 `PaddedT` 对象，并且其中对于 [] 符的重载定义中，会返回这个 PaddedT 的 value 成员，这个 value 就是我们传入的 T 泛型成员，也就是 `SideTable` 对象。在 array 的下标中，这里使用了 `indexForPointer` 方法通过位运算计算下标，实现了静态的 Hash Table。而在 `weak_table` 中，其成员 `weak_entry `会将传入对象的地址加以封装起来，并且其中也有访问全局弱引用表的入口\n\n## weak_register_no_lock(...)\n该方法将弱引用对象注册到弱引用表中，我们看一下它的具体实现\n\n``` C++\nid \nweak_register_no_lock(weak_table_t *weak_table, id referent_id, \n                      id *referrer_id, bool crashIfDeallocating)\n{\n    // weak对象的引用 即like\n    objc_object *referent = (objc_object *)referent_id;\n    // 指向weak对象的引用的指针 即Person对象中的&like 可理解为&(person.like)\n    objc_object **referrer = (objc_object **)referrer_id;\n\n    //判断TaggedPointer\n    if (!referent  ||  referent->isTaggedPointer()) return referent_id;\n\n    // ensure that the referenced object is viable 保证对象是可以访问的\n    bool deallocating;\n    if (!referent->ISA()->hasCustomRR()) {\n        deallocating = referent->rootIsDeallocating();\n    }\n    else {\n        BOOL (*allowsWeakReference)(objc_object *, SEL) = \n            (BOOL(*)(objc_object *, SEL))\n            object_getMethodImplementation((id)referent, \n                                           SEL_allowsWeakReference);\n        if ((IMP)allowsWeakReference == _objc_msgForward) {\n            return nil;\n        }\n        deallocating =\n            ! (*allowsWeakReference)(referent, SEL_allowsWeakReference);\n    }\n\n    if (deallocating) {\n        if (crashIfDeallocating) {\n            _objc_fatal(\"Cannot form weak reference to instance (%p) of \"\n                        \"class %s. It is possible that this object was \"\n                        \"over-released, or is in the process of deallocation.\",\n                        (void*)referent, object_getClassName((id)referent));\n        } else {\n            return nil;\n        }\n    }\n\n    // now remember it and where it is being stored\n    weak_entry_t *entry;\n    if ((entry = weak_entry_for_referent(weak_table, referent))) {\n        append_referrer(entry, referrer);\n    } \n    else {\n        // 该对象第一次插入\n        weak_entry_t new_entry(referent, referrer);\n        // 是否需要扩容表长度\n        weak_grow_maybe(weak_table);\n        // 插入表\n        weak_entry_insert(weak_table, &new_entry);\n    }\n\n    // Do not set *referrer. objc_storeWeak() requires that the \n    // value not change.\n\n    return referent_id;\n}\n```\n\n总结一下，我们weak对象的引用,与指向weak对象的引用，传入此函数中，假设是首次保存此weak对象的引用，构建出`weak_entry_t`的实例\n`new_entry`,判断当前的弱引用表是否需要增加长度，然后将`new_entry`插入到弱引用表`weak_table`中；如若不是第一次保存，首先取出旧的`entry`，并将指向weak对象的引用（即&(person.like)）保存在`entry`中。\n所以可以看出，一个`entry`中保存了所有指向该weak对象的弱引用\n\n## weak_unregister_no_lock(...)\n\n``` C++\nvoid\nweak_unregister_no_lock(weak_table_t *weak_table, id referent_id, \n                        id *referrer_id)\n{\n    objc_object *referent = (objc_object *)referent_id;\n    objc_object **referrer = (objc_object **)referrer_id;\n\n    weak_entry_t *entry;\n\n    if (!referent) return;\n\n    if ((entry = weak_entry_for_referent(weak_table, referent))) {\n        remove_referrer(entry, referrer);\n        bool empty = true;\n        if (entry->out_of_line()  &&  entry->num_refs != 0) {\n            empty = false;\n        }\n        else {\n            for (size_t i = 0; i < WEAK_INLINE_COUNT; i++) {\n                if (entry->inline_referrers[i]) {\n                    empty = false; \n                    break;\n                }\n            }\n        }\n\n        if (empty) {\n            weak_entry_remove(weak_table, entry);\n        }\n    }\n\n    // Do not set *referrer = nil. objc_storeWeak() requires that the \n    // value not change.\n}\n```\n\n其中该方法就是`remove_referrer(entry, referrer);`,在`entry`中移除了`referrer`,弱引用表中不再保存指向该weak对象的引用\n\n## weak对象释放\n\n![](http://omhkfini5.bkt.clouddn.com/weak2.png)\n我们可以看见当一个被弱引用指向的对象释放时，会调用`weak_clear_no_lock(...)`方法\n\n``` C++\nvoid \nweak_clear_no_lock(weak_table_t *weak_table, id referent_id) \n{\n    objc_object *referent = (objc_object *)referent_id;\n\n    weak_entry_t *entry = weak_entry_for_referent(weak_table, referent);\n    if (entry == nil) {\n        /// XXX shouldn't happen, but does with mismatched CF/objc\n        //printf(\"XXX no entry for clear deallocating %p\\n\", referent);\n        return;\n    }\n\n    // zero out references\n    weak_referrer_t *referrers;\n    size_t count;\n    \n    if (entry->out_of_line()) {\n        referrers = entry->referrers;\n        count = TABLE_SIZE(entry);\n    } \n    else {\n        referrers = entry->inline_referrers;\n        count = WEAK_INLINE_COUNT;\n    }\n    \n    for (size_t i = 0; i < count; ++i) {\n        objc_object **referrer = referrers[i];\n        if (referrer) {\n            if (*referrer == referent) {\n               //weak指向的对象，在释放时会被置nil的关键\n                *referrer = nil;\n            }\n            else if (*referrer) {\n                _objc_inform(\"__weak variable at %p holds %p instead of %p. \"\n                             \"This is probably incorrect use of \"\n                             \"objc_storeWeak() and objc_loadWeak(). \"\n                             \"Break on objc_weak_error to debug.\\n\", \n                             referrer, (void*)*referrer, (void*)referent);\n                objc_weak_error();\n            }\n        }\n    }\n    \n    weak_entry_remove(weak_table, entry);\n}\n```\n\n如方法中，通过`referent`,找到保存指向该对象的所有引用的实例`entry`，通过循环，将`entry`中的所有引用置为`nil`即可\n\n## weak引用表图解 \n![](http://omhkfini5.bkt.clouddn.com/weak5.png)\n\n\n参考资料</br>\n[http://www.jianshu.com/p/ef6d9bf8fe59](http://www.jianshu.com/p/ef6d9bf8fe59)</br>\n[http://kylinroc.github.io/objc-retain-release.html](http://kylinroc.github.io/objc-retain-release.html)</br>\n[http://ios.jobbole.com/89012/](http://ios.jobbole.com/89012/)\n\n\n","source":"_posts/iosweaks.md","raw":"---\ntitle: iOS大解密之Weak引用\ndate: 2017-04-06 17:23:32\ncategories: iOS\ntags: \n - iOS\n - Runtime\n---\n\n## 引言\nassign与weak有什么区别？面试的时候常常会被问到此问题，我们会回答weak修饰在对象释放时会自动变为nil,那么底层是怎么实现的呢？今天让我们来探讨一下，本文使用的runtime源码为大神提供的可编译版本[objc4-706](https://github.com/isaacselement/objc4-706)\n\n## storeWeak...\n\n与weak相关的操作，应该都调用了次方法，稍后看一下这个方法的实现，首先做一下准备工作\n\n我首先在项目中定义了两个类Person、Like实现如下\n\n``` C++\n@interface Person : NSObject\n@property (atomic,weak) Like *like;\n- (void)logLikeAddress;\n@end\n\n@implementation Person\n- (void)logLikeAddress\n{\n    printf(\"%p\",&_like);\n}\n@end\n\n// Like其实什么也没实现😂\n@interface Like : NSObject\n@end\n@implementation Like\n@end\n\n```\n\n其中main函数为\n\n``` C++\nvoid addLike(Person* person)\n{\n    Like *like = [[Like alloc] init];\n    printf(\"%p\\n\",like);\n    [person logLikeAddress];\n    person.like = like;\n}\n\nint main(int argc, const char * argv[])\n{\n    @autoreleasepool {\n        // insert code here...\n        Person *person = [[Person alloc] init];\n        addLike(person);\n\n    }\n    return 0;\n}\n```\n\n准备工作已经就绪了，我们在`Person`的中`weak`修饰的属性下断点，并单步调试，会发现如下的函数调用栈\n\n![](http://omhkfini5.bkt.clouddn.com/b2.png)\n\n我们发现了关键的函数`objc_storeWeak(...)`,下面我们要详细的探讨这一函数\n\n``` C++\ntemplate <bool HaveOld, bool HaveNew, bool CrashIfDeallocating>\nstatic id \nstoreWeak(id *location, objc_object *newObj)\n{\n    assert(HaveOld  ||  HaveNew);\n    if (!HaveNew) assert(newObj == nil);\n\n    Class previouslyInitializedClass = nil;\n    id oldObj;\n    // 新旧引用表创建\n    SideTable *oldTable;\n    SideTable *newTable;\n\n    // Acquire locks for old and new values.\n    // Order by lock address to prevent lock ordering problems. \n    // Retry if the old value changes underneath us.\n retry:\n    if (HaveOld) {\n        // 获取旧引用表\n        oldObj = *location;\n        oldTable = &SideTables()[oldObj];\n    } else {\n        oldTable = nil;\n    }\n    if (HaveNew) {\n        // 获取新引用表\n        newTable = &SideTables()[newObj];\n    } else {\n        newTable = nil;\n    }\n    // 加锁\n    SideTable::lockTwo<HaveOld, HaveNew>(oldTable, newTable);\n    // location 应该与 oldObj 保持一致，否则重新获取\n    if (HaveOld  &&  *location != oldObj) {\n        SideTable::unlockTwo<HaveOld, HaveNew>(oldTable, newTable);\n        goto retry;\n    }\n\n    // Prevent a deadlock between the weak reference machinery\n    // and the +initialize machinery by ensuring that no \n    // weakly-referenced object has an un-+initialized isa.\n    if (HaveNew  &&  newObj) {\n        Class cls = newObj->getIsa();\n        if (cls != previouslyInitializedClass  &&  \n            !((objc_class *)cls)->isInitialized()) \n        {\n            SideTable::unlockTwo<HaveOld, HaveNew>(oldTable, newTable);\n            _class_initialize(_class_getNonMetaClass(cls, (id)newObj));\n\n            // If this class is finished with +initialize then we're good.\n            // If this class is still running +initialize on this thread \n            // (i.e. +initialize called storeWeak on an instance of itself)\n            // then we may proceed but it will appear initializing and \n            // not yet initialized to the check above.\n            // Instead set previouslyInitializedClass to recognize it on retry.\n            previouslyInitializedClass = cls;\n\n            goto retry;\n        }\n    }\n\n    // Clean up old value, if any. 清除旧值\n    if (HaveOld) {\n        weak_unregister_no_lock(&oldTable->weak_table, oldObj, location);\n    }\n\n    // Assign new value, if any. 设置新值\n    if (HaveNew) {\n        newObj = (objc_object *)weak_register_no_lock(&newTable->weak_table, \n                                                      (id)newObj, location, \n                                                      CrashIfDeallocating);\n        // weak_register_no_lock returns nil if weak store should be rejected\n\n        // Set is-weakly-referenced bit in refcount table.\n        if (newObj  &&  !newObj->isTaggedPointer()) {\n            // 标记该对象是一个弱引用\n            newObj->setWeaklyReferenced_nolock();\n        }\n\n        // Do not set *location anywhere else. That would introduce a race.\n        *location = (id)newObj;\n    }\n    else {\n        // No new value. The storage is not changed.\n    }\n    \n    SideTable::unlockTwo<HaveOld, HaveNew>(oldTable, newTable);\n\n    return (id)newObj;\n}\n\n```\n\n在此方法中，我们可以看见一些关键点， `SideTable`， `weak_unregister_no_lock(...)`， `weak_register_no_lock（...）`，下面我们会逐一介绍\n\n## 引用计数和弱引用依赖表 SideTable\nSideTable 是一个结构体，主要用于管理对象的引用计数和 weak 表。在 NSObject.mm 中声明其数据结构\n\n``` C++\nstruct SideTable {\n    //自旋锁\n    spinlock_t slock;\n    // 引用计数表\n    RefcountMap refcnts;\n    // 弱引用表\n    weak_table_t weak_table;\n\n    SideTable() {\n        memset(&weak_table, 0, sizeof(weak_table));\n    }\n\n    ~SideTable() {\n        _objc_fatal(\"Do not delete SideTable.\");\n    }\n\n    void lock() { slock.lock(); }\n    void unlock() { slock.unlock(); }\n\n    // Address-ordered lock discipline for a pair of side tables.\n\n    template<bool HaveOld, bool HaveNew>\n    static void lockTwo(SideTable *lock1, SideTable *lock2);\n    template<bool HaveOld, bool HaveNew>\n    static void unlockTwo(SideTable *lock1, SideTable *lock2);\n};\n```\n\n对于该结构体中的`slock`,`refcnts`,暂时我们不做讨论，我们主要讨论与弱引用相关的`weak_table`作用，其中`weak_table_t`的结构如下\n\n``` C++\nstruct weak_table_t {\n    // 保存了所有指向指定对象的 weak 指针\n    weak_entry_t *weak_entries;\n    // 存储空间\n    size_t    num_entries;\n    // 参与判断引用计数辅助量\n    uintptr_t mask;\n    // hash key 最大偏移值\n    uintptr_t max_hash_displacement;\n};\n```\n\n这是一个全局弱引用表。使用不定类型对象的地址作为 key ，用`weak_entry_t`类型结构体对象作为value。其中的`weak_entries`成员，从字面意思上看，即为弱引用表入口。其实现也是这样的\n\n``` C++\n#define WEAK_INLINE_COUNT 4\n#define REFERRERS_OUT_OF_LINE 2\nstruct weak_entry_t {\n    DisguisedPtr<objc_object> referent;\n    union {\n        struct {\n            weak_referrer_t *referrers;\n            uintptr_t        out_of_line_ness : 2;\n            uintptr_t        num_refs : PTR_MINUS_2;\n            uintptr_t        mask;\n            uintptr_t        max_hash_displacement;\n        };\n        struct {\n            // out_of_line_ness field is low bits of inline_referrers[1]\n            weak_referrer_t  inline_referrers[WEAK_INLINE_COUNT];\n        };\n    };\n\n    bool out_of_line() {\n        return (out_of_line_ness == REFERRERS_OUT_OF_LINE);\n    }\n\n    weak_entry_t& operator=(const weak_entry_t& other) {\n        memcpy(this, &other, sizeof(other));\n        return *this;\n    }\n\n    weak_entry_t(objc_object *newReferent, objc_object **newReferrer)\n        : referent(newReferent)\n    {\n        inline_referrers[0] = newReferrer;\n        for (int i = 1; i < WEAK_INLINE_COUNT; i++) {\n            inline_referrers[i] = nil;\n        }\n    }\n};\n```\n\n让我们回到`storeWeak(...)`函数中，获取`oldTable`,与`newTable`,发现调用的函数为`&SideTables()[newObj]`,`&SideTables()[oldObj]`,其中该方法的实现为\n\n``` C++\nalignas(StripedMap<SideTable>) static uint8_t SideTableBuf[sizeof(StripedMap<SideTable>)];\n\nstatic void SideTableInit() {\n    new (SideTableBuf) StripedMap<SideTable>();\n}\n\nstatic StripedMap<SideTable>& SideTables() {\n    return *reinterpret_cast<StripedMap<SideTable>*>(SideTableBuf);\n}\n```\n\n``` C++\ntemplate<typename T>\nclass StripedMap {\n\n    enum { CacheLineSize = 64 };\n\n#if TARGET_OS_EMBEDDED\n    enum { StripeCount = 8 };\n#else\n    enum { StripeCount = 64 };\n#endif\n\n    struct PaddedT {\n        T value alignas(CacheLineSize);\n    };\n\n    PaddedT array[StripeCount];\n\n    static unsigned int indexForPointer(const void *p) {\n        uintptr_t addr = reinterpret_cast<uintptr_t>(p);\n        return ((addr >> 4) ^ (addr >> 9)) % StripeCount;\n    }\n\n public:\n    T& operator[] (const void *p) { \n        return array[indexForPointer(p)].value; \n    }\n    const T& operator[] (const void *p) const { \n        return const_cast<StripedMap<T>>(this)[p]; \n    }\n};\n```\n\n在上面我们可以看出`StripedMap`是一个模板类（Template Class），通过传入类（结构体）参数，会动态修改在该类中的一个 array 成员存储的元素类型，并且其中提供了一个针对于地址的 hash 算法，用作存储key。可以说， `StripedMap` 提供了一套拥有将地址作为 key 的 hash table 解决方案，而该方案采用了模板类，是拥有泛型性的,在这个类中有一个 array 成员，用来存储 `PaddedT` 对象，并且其中对于 [] 符的重载定义中，会返回这个 PaddedT 的 value 成员，这个 value 就是我们传入的 T 泛型成员，也就是 `SideTable` 对象。在 array 的下标中，这里使用了 `indexForPointer` 方法通过位运算计算下标，实现了静态的 Hash Table。而在 `weak_table` 中，其成员 `weak_entry `会将传入对象的地址加以封装起来，并且其中也有访问全局弱引用表的入口\n\n## weak_register_no_lock(...)\n该方法将弱引用对象注册到弱引用表中，我们看一下它的具体实现\n\n``` C++\nid \nweak_register_no_lock(weak_table_t *weak_table, id referent_id, \n                      id *referrer_id, bool crashIfDeallocating)\n{\n    // weak对象的引用 即like\n    objc_object *referent = (objc_object *)referent_id;\n    // 指向weak对象的引用的指针 即Person对象中的&like 可理解为&(person.like)\n    objc_object **referrer = (objc_object **)referrer_id;\n\n    //判断TaggedPointer\n    if (!referent  ||  referent->isTaggedPointer()) return referent_id;\n\n    // ensure that the referenced object is viable 保证对象是可以访问的\n    bool deallocating;\n    if (!referent->ISA()->hasCustomRR()) {\n        deallocating = referent->rootIsDeallocating();\n    }\n    else {\n        BOOL (*allowsWeakReference)(objc_object *, SEL) = \n            (BOOL(*)(objc_object *, SEL))\n            object_getMethodImplementation((id)referent, \n                                           SEL_allowsWeakReference);\n        if ((IMP)allowsWeakReference == _objc_msgForward) {\n            return nil;\n        }\n        deallocating =\n            ! (*allowsWeakReference)(referent, SEL_allowsWeakReference);\n    }\n\n    if (deallocating) {\n        if (crashIfDeallocating) {\n            _objc_fatal(\"Cannot form weak reference to instance (%p) of \"\n                        \"class %s. It is possible that this object was \"\n                        \"over-released, or is in the process of deallocation.\",\n                        (void*)referent, object_getClassName((id)referent));\n        } else {\n            return nil;\n        }\n    }\n\n    // now remember it and where it is being stored\n    weak_entry_t *entry;\n    if ((entry = weak_entry_for_referent(weak_table, referent))) {\n        append_referrer(entry, referrer);\n    } \n    else {\n        // 该对象第一次插入\n        weak_entry_t new_entry(referent, referrer);\n        // 是否需要扩容表长度\n        weak_grow_maybe(weak_table);\n        // 插入表\n        weak_entry_insert(weak_table, &new_entry);\n    }\n\n    // Do not set *referrer. objc_storeWeak() requires that the \n    // value not change.\n\n    return referent_id;\n}\n```\n\n总结一下，我们weak对象的引用,与指向weak对象的引用，传入此函数中，假设是首次保存此weak对象的引用，构建出`weak_entry_t`的实例\n`new_entry`,判断当前的弱引用表是否需要增加长度，然后将`new_entry`插入到弱引用表`weak_table`中；如若不是第一次保存，首先取出旧的`entry`，并将指向weak对象的引用（即&(person.like)）保存在`entry`中。\n所以可以看出，一个`entry`中保存了所有指向该weak对象的弱引用\n\n## weak_unregister_no_lock(...)\n\n``` C++\nvoid\nweak_unregister_no_lock(weak_table_t *weak_table, id referent_id, \n                        id *referrer_id)\n{\n    objc_object *referent = (objc_object *)referent_id;\n    objc_object **referrer = (objc_object **)referrer_id;\n\n    weak_entry_t *entry;\n\n    if (!referent) return;\n\n    if ((entry = weak_entry_for_referent(weak_table, referent))) {\n        remove_referrer(entry, referrer);\n        bool empty = true;\n        if (entry->out_of_line()  &&  entry->num_refs != 0) {\n            empty = false;\n        }\n        else {\n            for (size_t i = 0; i < WEAK_INLINE_COUNT; i++) {\n                if (entry->inline_referrers[i]) {\n                    empty = false; \n                    break;\n                }\n            }\n        }\n\n        if (empty) {\n            weak_entry_remove(weak_table, entry);\n        }\n    }\n\n    // Do not set *referrer = nil. objc_storeWeak() requires that the \n    // value not change.\n}\n```\n\n其中该方法就是`remove_referrer(entry, referrer);`,在`entry`中移除了`referrer`,弱引用表中不再保存指向该weak对象的引用\n\n## weak对象释放\n\n![](http://omhkfini5.bkt.clouddn.com/weak2.png)\n我们可以看见当一个被弱引用指向的对象释放时，会调用`weak_clear_no_lock(...)`方法\n\n``` C++\nvoid \nweak_clear_no_lock(weak_table_t *weak_table, id referent_id) \n{\n    objc_object *referent = (objc_object *)referent_id;\n\n    weak_entry_t *entry = weak_entry_for_referent(weak_table, referent);\n    if (entry == nil) {\n        /// XXX shouldn't happen, but does with mismatched CF/objc\n        //printf(\"XXX no entry for clear deallocating %p\\n\", referent);\n        return;\n    }\n\n    // zero out references\n    weak_referrer_t *referrers;\n    size_t count;\n    \n    if (entry->out_of_line()) {\n        referrers = entry->referrers;\n        count = TABLE_SIZE(entry);\n    } \n    else {\n        referrers = entry->inline_referrers;\n        count = WEAK_INLINE_COUNT;\n    }\n    \n    for (size_t i = 0; i < count; ++i) {\n        objc_object **referrer = referrers[i];\n        if (referrer) {\n            if (*referrer == referent) {\n               //weak指向的对象，在释放时会被置nil的关键\n                *referrer = nil;\n            }\n            else if (*referrer) {\n                _objc_inform(\"__weak variable at %p holds %p instead of %p. \"\n                             \"This is probably incorrect use of \"\n                             \"objc_storeWeak() and objc_loadWeak(). \"\n                             \"Break on objc_weak_error to debug.\\n\", \n                             referrer, (void*)*referrer, (void*)referent);\n                objc_weak_error();\n            }\n        }\n    }\n    \n    weak_entry_remove(weak_table, entry);\n}\n```\n\n如方法中，通过`referent`,找到保存指向该对象的所有引用的实例`entry`，通过循环，将`entry`中的所有引用置为`nil`即可\n\n## weak引用表图解 \n![](http://omhkfini5.bkt.clouddn.com/weak5.png)\n\n\n参考资料</br>\n[http://www.jianshu.com/p/ef6d9bf8fe59](http://www.jianshu.com/p/ef6d9bf8fe59)</br>\n[http://kylinroc.github.io/objc-retain-release.html](http://kylinroc.github.io/objc-retain-release.html)</br>\n[http://ios.jobbole.com/89012/](http://ios.jobbole.com/89012/)\n\n\n","slug":"iosweaks","published":1,"updated":"2017-04-06T09:52:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d1x3420003p36dibg7cbkf","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>assign与weak有什么区别？面试的时候常常会被问到此问题，我们会回答weak修饰在对象释放时会自动变为nil,那么底层是怎么实现的呢？今天让我们来探讨一下，本文使用的runtime源码为大神提供的可编译版本<a href=\"https://github.com/isaacselement/objc4-706\" target=\"_blank\" rel=\"external\">objc4-706</a></p>\n<h2 id=\"storeWeak…\"><a href=\"#storeWeak…\" class=\"headerlink\" title=\"storeWeak…\"></a>storeWeak…</h2><p>与weak相关的操作，应该都调用了次方法，稍后看一下这个方法的实现，首先做一下准备工作</p>\n<p>我首先在项目中定义了两个类Person、Like实现如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">@interface Person : NSObject</div><div class=\"line\">@property (atomic,weak) Like *like;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)logLikeAddress;</div><div class=\"line\">@end</div><div class=\"line\"></div><div class=\"line\">@implementation Person</div><div class=\"line\">- (<span class=\"keyword\">void</span>)logLikeAddress</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%p\"</span>,&amp;_like);</div><div class=\"line\">&#125;</div><div class=\"line\">@end</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Like其实什么也没实现😂</span></div><div class=\"line\">@interface Like : NSObject</div><div class=\"line\">@end</div><div class=\"line\">@implementation Like</div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p>其中main函数为</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addLike</span><span class=\"params\">(Person* person)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    Like *like = [[Like alloc] init];</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%p\\n\"</span>,like);</div><div class=\"line\">    [person logLikeAddress];</div><div class=\"line\">    person.like = like;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        <span class=\"comment\">// insert code here...</span></div><div class=\"line\">        Person *person = [[Person alloc] init];</div><div class=\"line\">        addLike(person);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>准备工作已经就绪了，我们在<code>Person</code>的中<code>weak</code>修饰的属性下断点，并单步调试，会发现如下的函数调用栈</p>\n<p><img src=\"http://omhkfini5.bkt.clouddn.com/b2.png\" alt=\"\"></p>\n<p>我们发现了关键的函数<code>objc_storeWeak(...)</code>,下面我们要详细的探讨这一函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">bool</span> HaveOld, <span class=\"keyword\">bool</span> HaveNew, <span class=\"keyword\">bool</span> CrashIfDeallocating&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> id </span></div><div class=\"line\"><span class=\"title\">storeWeak</span><span class=\"params\">(id *location, objc_object *newObj)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    assert(HaveOld  ||  HaveNew);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!HaveNew) assert(newObj == nil);</div><div class=\"line\"></div><div class=\"line\">    Class previouslyInitializedClass = nil;</div><div class=\"line\">    id oldObj;</div><div class=\"line\">    <span class=\"comment\">// 新旧引用表创建</span></div><div class=\"line\">    SideTable *oldTable;</div><div class=\"line\">    SideTable *newTable;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Acquire locks for old and new values.</span></div><div class=\"line\">    <span class=\"comment\">// Order by lock address to prevent lock ordering problems. </span></div><div class=\"line\">    <span class=\"comment\">// Retry if the old value changes underneath us.</span></div><div class=\"line\"> retry:</div><div class=\"line\">    <span class=\"keyword\">if</span> (HaveOld) &#123;</div><div class=\"line\">        <span class=\"comment\">// 获取旧引用表</span></div><div class=\"line\">        oldObj = *location;</div><div class=\"line\">        oldTable = &amp;SideTables()[oldObj];</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        oldTable = nil;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (HaveNew) &#123;</div><div class=\"line\">        <span class=\"comment\">// 获取新引用表</span></div><div class=\"line\">        newTable = &amp;SideTables()[newObj];</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        newTable = nil;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 加锁</span></div><div class=\"line\">    SideTable::lockTwo&lt;HaveOld, HaveNew&gt;(oldTable, newTable);</div><div class=\"line\">    <span class=\"comment\">// location 应该与 oldObj 保持一致，否则重新获取</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (HaveOld  &amp;&amp;  *location != oldObj) &#123;</div><div class=\"line\">        SideTable::unlockTwo&lt;HaveOld, HaveNew&gt;(oldTable, newTable);</div><div class=\"line\">        <span class=\"keyword\">goto</span> retry;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Prevent a deadlock between the weak reference machinery</span></div><div class=\"line\">    <span class=\"comment\">// and the +initialize machinery by ensuring that no </span></div><div class=\"line\">    <span class=\"comment\">// weakly-referenced object has an un-+initialized isa.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (HaveNew  &amp;&amp;  newObj) &#123;</div><div class=\"line\">        Class cls = newObj-&gt;getIsa();</div><div class=\"line\">        <span class=\"keyword\">if</span> (cls != previouslyInitializedClass  &amp;&amp;  </div><div class=\"line\">            !((objc_class *)cls)-&gt;isInitialized()) </div><div class=\"line\">        &#123;</div><div class=\"line\">            SideTable::unlockTwo&lt;HaveOld, HaveNew&gt;(oldTable, newTable);</div><div class=\"line\">            _class_initialize(_class_getNonMetaClass(cls, (id)newObj));</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// If this class is finished with +initialize then we're good.</span></div><div class=\"line\">            <span class=\"comment\">// If this class is still running +initialize on this thread </span></div><div class=\"line\">            <span class=\"comment\">// (i.e. +initialize called storeWeak on an instance of itself)</span></div><div class=\"line\">            <span class=\"comment\">// then we may proceed but it will appear initializing and </span></div><div class=\"line\">            <span class=\"comment\">// not yet initialized to the check above.</span></div><div class=\"line\">            <span class=\"comment\">// Instead set previouslyInitializedClass to recognize it on retry.</span></div><div class=\"line\">            previouslyInitializedClass = cls;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">goto</span> retry;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Clean up old value, if any. 清除旧值</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (HaveOld) &#123;</div><div class=\"line\">        weak_unregister_no_lock(&amp;oldTable-&gt;weak_table, oldObj, location);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Assign new value, if any. 设置新值</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (HaveNew) &#123;</div><div class=\"line\">        newObj = (objc_object *)weak_register_no_lock(&amp;newTable-&gt;weak_table, </div><div class=\"line\">                                                      (id)newObj, location, </div><div class=\"line\">                                                      CrashIfDeallocating);</div><div class=\"line\">        <span class=\"comment\">// weak_register_no_lock returns nil if weak store should be rejected</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Set is-weakly-referenced bit in refcount table.</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (newObj  &amp;&amp;  !newObj-&gt;isTaggedPointer()) &#123;</div><div class=\"line\">            <span class=\"comment\">// 标记该对象是一个弱引用</span></div><div class=\"line\">            newObj-&gt;setWeaklyReferenced_nolock();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Do not set *location anywhere else. That would introduce a race.</span></div><div class=\"line\">        *location = (id)newObj;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// No new value. The storage is not changed.</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    SideTable::unlockTwo&lt;HaveOld, HaveNew&gt;(oldTable, newTable);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> (id)newObj;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在此方法中，我们可以看见一些关键点， <code>SideTable</code>， <code>weak_unregister_no_lock(...)</code>， <code>weak_register_no_lock（...）</code>，下面我们会逐一介绍</p>\n<h2 id=\"引用计数和弱引用依赖表-SideTable\"><a href=\"#引用计数和弱引用依赖表-SideTable\" class=\"headerlink\" title=\"引用计数和弱引用依赖表 SideTable\"></a>引用计数和弱引用依赖表 SideTable</h2><p>SideTable 是一个结构体，主要用于管理对象的引用计数和 weak 表。在 NSObject.mm 中声明其数据结构</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> SideTable &#123;</div><div class=\"line\">    <span class=\"comment\">//自旋锁</span></div><div class=\"line\">    <span class=\"keyword\">spinlock_t</span> slock;</div><div class=\"line\">    <span class=\"comment\">// 引用计数表</span></div><div class=\"line\">    RefcountMap refcnts;</div><div class=\"line\">    <span class=\"comment\">// 弱引用表</span></div><div class=\"line\">    <span class=\"keyword\">weak_table_t</span> weak_table;</div><div class=\"line\"></div><div class=\"line\">    SideTable() &#123;</div><div class=\"line\">        <span class=\"built_in\">memset</span>(&amp;weak_table, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(weak_table));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ~SideTable() &#123;</div><div class=\"line\">        _objc_fatal(<span class=\"string\">\"Do not delete SideTable.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span> </span>&#123; slock.lock(); &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span> </span>&#123; slock.unlock(); &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Address-ordered lock discipline for a pair of side tables.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">bool</span> HaveOld, <span class=\"keyword\">bool</span> HaveNew&gt;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">lockTwo</span><span class=\"params\">(SideTable *lock1, SideTable *lock2)</span></span>;</div><div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">bool</span> HaveOld, <span class=\"keyword\">bool</span> HaveNew&gt;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">unlockTwo</span><span class=\"params\">(SideTable *lock1, SideTable *lock2)</span></span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>对于该结构体中的<code>slock</code>,<code>refcnts</code>,暂时我们不做讨论，我们主要讨论与弱引用相关的<code>weak_table</code>作用，其中<code>weak_table_t</code>的结构如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> <span class=\"keyword\">weak_table_t</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 保存了所有指向指定对象的 weak 指针</span></div><div class=\"line\">    <span class=\"keyword\">weak_entry_t</span> *weak_entries;</div><div class=\"line\">    <span class=\"comment\">// 存储空间</span></div><div class=\"line\">    <span class=\"keyword\">size_t</span>    num_entries;</div><div class=\"line\">    <span class=\"comment\">// 参与判断引用计数辅助量</span></div><div class=\"line\">    <span class=\"keyword\">uintptr_t</span> mask;</div><div class=\"line\">    <span class=\"comment\">// hash key 最大偏移值</span></div><div class=\"line\">    <span class=\"keyword\">uintptr_t</span> max_hash_displacement;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这是一个全局弱引用表。使用不定类型对象的地址作为 key ，用<code>weak_entry_t</code>类型结构体对象作为value。其中的<code>weak_entries</code>成员，从字面意思上看，即为弱引用表入口。其实现也是这样的</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> WEAK_INLINE_COUNT 4</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REFERRERS_OUT_OF_LINE 2</span></div><div class=\"line\"><span class=\"keyword\">struct</span> <span class=\"keyword\">weak_entry_t</span> &#123;</div><div class=\"line\">    DisguisedPtr&lt;objc_object&gt; referent;</div><div class=\"line\">    <span class=\"keyword\">union</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">weak_referrer_t</span> *referrers;</div><div class=\"line\">            <span class=\"keyword\">uintptr_t</span>        out_of_line_ness : <span class=\"number\">2</span>;</div><div class=\"line\">            <span class=\"keyword\">uintptr_t</span>        num_refs : PTR_MINUS_2;</div><div class=\"line\">            <span class=\"keyword\">uintptr_t</span>        mask;</div><div class=\"line\">            <span class=\"keyword\">uintptr_t</span>        max_hash_displacement;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// out_of_line_ness field is low bits of inline_referrers[1]</span></div><div class=\"line\">            <span class=\"keyword\">weak_referrer_t</span>  inline_referrers[WEAK_INLINE_COUNT];</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">out_of_line</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (out_of_line_ness == REFERRERS_OUT_OF_LINE);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">weak_entry_t</span>&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> <span class=\"keyword\">weak_entry_t</span>&amp; other) &#123;</div><div class=\"line\">        <span class=\"built_in\">memcpy</span>(<span class=\"keyword\">this</span>, &amp;other, <span class=\"keyword\">sizeof</span>(other));</div><div class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">weak_entry_t</span>(objc_object *newReferent, objc_object **newReferrer)</div><div class=\"line\">        : referent(newReferent)</div><div class=\"line\">    &#123;</div><div class=\"line\">        inline_referrers[<span class=\"number\">0</span>] = newReferrer;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; WEAK_INLINE_COUNT; i++) &#123;</div><div class=\"line\">            inline_referrers[i] = nil;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>让我们回到<code>storeWeak(...)</code>函数中，获取<code>oldTable</code>,与<code>newTable</code>,发现调用的函数为<code>&amp;SideTables()[newObj]</code>,<code>&amp;SideTables()[oldObj]</code>,其中该方法的实现为</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">alignas(StripedMap&lt;SideTable&gt;) <span class=\"keyword\">static</span> <span class=\"keyword\">uint8_t</span> SideTableBuf[<span class=\"keyword\">sizeof</span>(StripedMap&lt;SideTable&gt;)];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SideTableInit</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">new</span> (SideTableBuf) StripedMap&lt;SideTable&gt;();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> StripedMap&lt;SideTable&gt;&amp; SideTables() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">reinterpret_cast</span>&lt;StripedMap&lt;SideTable&gt;*&gt;(SideTableBuf);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div><div class=\"line\"><span class=\"keyword\">class</span> StripedMap &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">enum</span> &#123; CacheLineSize = <span class=\"number\">64</span> &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> TARGET_OS_EMBEDDED</span></div><div class=\"line\">    <span class=\"keyword\">enum</span> &#123; StripeCount = <span class=\"number\">8</span> &#125;;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\">    <span class=\"keyword\">enum</span> &#123; StripeCount = <span class=\"number\">64</span> &#125;;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">struct</span> PaddedT &#123;</div><div class=\"line\">        <span class=\"function\">T value <span class=\"title\">alignas</span><span class=\"params\">(CacheLineSize)</span></span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    PaddedT <span class=\"built_in\">array</span>[StripeCount];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"title\">indexForPointer</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *p)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">uintptr_t</span> addr = <span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">uintptr_t</span>&gt;(p);</div><div class=\"line\">        <span class=\"keyword\">return</span> ((addr &gt;&gt; <span class=\"number\">4</span>) ^ (addr &gt;&gt; <span class=\"number\">9</span>)) % StripeCount;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">public</span>:</div><div class=\"line\">    T&amp; <span class=\"keyword\">operator</span>[] (<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *p) &#123; </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">array</span>[indexForPointer(p)].value; </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">const</span> T&amp; <span class=\"keyword\">operator</span>[] (<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *p) <span class=\"keyword\">const</span> &#123; </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">const_cast</span>&lt;StripedMap&lt;T&gt;&gt;(<span class=\"keyword\">this</span>)[p]; </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>在上面我们可以看出<code>StripedMap</code>是一个模板类（Template Class），通过传入类（结构体）参数，会动态修改在该类中的一个 array 成员存储的元素类型，并且其中提供了一个针对于地址的 hash 算法，用作存储key。可以说， <code>StripedMap</code> 提供了一套拥有将地址作为 key 的 hash table 解决方案，而该方案采用了模板类，是拥有泛型性的,在这个类中有一个 array 成员，用来存储 <code>PaddedT</code> 对象，并且其中对于 [] 符的重载定义中，会返回这个 PaddedT 的 value 成员，这个 value 就是我们传入的 T 泛型成员，也就是 <code>SideTable</code> 对象。在 array 的下标中，这里使用了 <code>indexForPointer</code> 方法通过位运算计算下标，实现了静态的 Hash Table。而在 <code>weak_table</code> 中，其成员 <code>weak_entry</code>会将传入对象的地址加以封装起来，并且其中也有访问全局弱引用表的入口</p>\n<h2 id=\"weak-register-no-lock-…\"><a href=\"#weak-register-no-lock-…\" class=\"headerlink\" title=\"weak_register_no_lock(…)\"></a>weak_register_no_lock(…)</h2><p>该方法将弱引用对象注册到弱引用表中，我们看一下它的具体实现</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">id </span></div><div class=\"line\"><span class=\"title\">weak_register_no_lock</span><span class=\"params\">(<span class=\"keyword\">weak_table_t</span> *weak_table, id referent_id, </span></div><div class=\"line\">                      id *referrer_id, <span class=\"keyword\">bool</span> crashIfDeallocating)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// weak对象的引用 即like</span></div><div class=\"line\">    objc_object *referent = (objc_object *)referent_id;</div><div class=\"line\">    <span class=\"comment\">// 指向weak对象的引用的指针 即Person对象中的&amp;like 可理解为&amp;(person.like)</span></div><div class=\"line\">    objc_object **referrer = (objc_object **)referrer_id;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//判断TaggedPointer</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!referent  ||  referent-&gt;isTaggedPointer()) <span class=\"keyword\">return</span> referent_id;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// ensure that the referenced object is viable 保证对象是可以访问的</span></div><div class=\"line\">    <span class=\"keyword\">bool</span> deallocating;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!referent-&gt;ISA()-&gt;hasCustomRR()) &#123;</div><div class=\"line\">        deallocating = referent-&gt;rootIsDeallocating();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        BOOL (*allowsWeakReference)(objc_object *, SEL) = </div><div class=\"line\">            (BOOL(*)(objc_object *, SEL))</div><div class=\"line\">            object_getMethodImplementation((id)referent, </div><div class=\"line\">                                           SEL_allowsWeakReference);</div><div class=\"line\">        <span class=\"keyword\">if</span> ((IMP)allowsWeakReference == _objc_msgForward) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> nil;</div><div class=\"line\">        &#125;</div><div class=\"line\">        deallocating =</div><div class=\"line\">            ! (*allowsWeakReference)(referent, SEL_allowsWeakReference);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (deallocating) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (crashIfDeallocating) &#123;</div><div class=\"line\">            _objc_fatal(<span class=\"string\">\"Cannot form weak reference to instance (%p) of \"</span></div><div class=\"line\">                        <span class=\"string\">\"class %s. It is possible that this object was \"</span></div><div class=\"line\">                        <span class=\"string\">\"over-released, or is in the process of deallocation.\"</span>,</div><div class=\"line\">                        (<span class=\"keyword\">void</span>*)referent, object_getClassName((id)referent));</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> nil;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// now remember it and where it is being stored</span></div><div class=\"line\">    <span class=\"keyword\">weak_entry_t</span> *entry;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((entry = weak_entry_for_referent(weak_table, referent))) &#123;</div><div class=\"line\">        append_referrer(entry, referrer);</div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 该对象第一次插入</span></div><div class=\"line\">        <span class=\"keyword\">weak_entry_t</span> new_entry(referent, referrer);</div><div class=\"line\">        <span class=\"comment\">// 是否需要扩容表长度</span></div><div class=\"line\">        weak_grow_maybe(weak_table);</div><div class=\"line\">        <span class=\"comment\">// 插入表</span></div><div class=\"line\">        weak_entry_insert(weak_table, &amp;new_entry);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Do not set *referrer. objc_storeWeak() requires that the </span></div><div class=\"line\">    <span class=\"comment\">// value not change.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> referent_id;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>总结一下，我们weak对象的引用,与指向weak对象的引用，传入此函数中，假设是首次保存此weak对象的引用，构建出<code>weak_entry_t</code>的实例<br><code>new_entry</code>,判断当前的弱引用表是否需要增加长度，然后将<code>new_entry</code>插入到弱引用表<code>weak_table</code>中；如若不是第一次保存，首先取出旧的<code>entry</code>，并将指向weak对象的引用（即&amp;(person.like)）保存在<code>entry</code>中。<br>所以可以看出，一个<code>entry</code>中保存了所有指向该weak对象的弱引用</p>\n<h2 id=\"weak-unregister-no-lock-…\"><a href=\"#weak-unregister-no-lock-…\" class=\"headerlink\" title=\"weak_unregister_no_lock(…)\"></a>weak_unregister_no_lock(…)</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span></span></div><div class=\"line\"><span class=\"title\">weak_unregister_no_lock</span><span class=\"params\">(<span class=\"keyword\">weak_table_t</span> *weak_table, id referent_id, </span></div><div class=\"line\">                        id *referrer_id)</div><div class=\"line\">&#123;</div><div class=\"line\">    objc_object *referent = (objc_object *)referent_id;</div><div class=\"line\">    objc_object **referrer = (objc_object **)referrer_id;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">weak_entry_t</span> *entry;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!referent) <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> ((entry = weak_entry_for_referent(weak_table, referent))) &#123;</div><div class=\"line\">        remove_referrer(entry, referrer);</div><div class=\"line\">        <span class=\"keyword\">bool</span> empty = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (entry-&gt;out_of_line()  &amp;&amp;  entry-&gt;num_refs != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            empty = <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; WEAK_INLINE_COUNT; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (entry-&gt;inline_referrers[i]) &#123;</div><div class=\"line\">                    empty = <span class=\"literal\">false</span>; </div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (empty) &#123;</div><div class=\"line\">            weak_entry_remove(weak_table, entry);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Do not set *referrer = nil. objc_storeWeak() requires that the </span></div><div class=\"line\">    <span class=\"comment\">// value not change.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中该方法就是<code>remove_referrer(entry, referrer);</code>,在<code>entry</code>中移除了<code>referrer</code>,弱引用表中不再保存指向该weak对象的引用</p>\n<h2 id=\"weak对象释放\"><a href=\"#weak对象释放\" class=\"headerlink\" title=\"weak对象释放\"></a>weak对象释放</h2><p><img src=\"http://omhkfini5.bkt.clouddn.com/weak2.png\" alt=\"\"><br>我们可以看见当一个被弱引用指向的对象释放时，会调用<code>weak_clear_no_lock(...)</code>方法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> </span></div><div class=\"line\"><span class=\"title\">weak_clear_no_lock</span><span class=\"params\">(<span class=\"keyword\">weak_table_t</span> *weak_table, id referent_id)</span> </div><div class=\"line\">&#123;</div><div class=\"line\">    objc_object *referent = (objc_object *)referent_id;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">weak_entry_t</span> *entry = weak_entry_for_referent(weak_table, referent);</div><div class=\"line\">    <span class=\"keyword\">if</span> (entry == nil) &#123;</div><div class=\"line\">        <span class=\"comment\">/// XXX shouldn't happen, but does with mismatched CF/objc</span></div><div class=\"line\">        <span class=\"comment\">//printf(\"XXX no entry for clear deallocating %p\\n\", referent);</span></div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// zero out references</span></div><div class=\"line\">    <span class=\"keyword\">weak_referrer_t</span> *referrers;</div><div class=\"line\">    <span class=\"keyword\">size_t</span> count;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (entry-&gt;out_of_line()) &#123;</div><div class=\"line\">        referrers = entry-&gt;referrers;</div><div class=\"line\">        count = TABLE_SIZE(entry);</div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        referrers = entry-&gt;inline_referrers;</div><div class=\"line\">        count = WEAK_INLINE_COUNT;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; count; ++i) &#123;</div><div class=\"line\">        objc_object **referrer = referrers[i];</div><div class=\"line\">        <span class=\"keyword\">if</span> (referrer) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (*referrer == referent) &#123;</div><div class=\"line\">               <span class=\"comment\">//weak指向的对象，在释放时会被置nil的关键</span></div><div class=\"line\">                *referrer = nil;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*referrer) &#123;</div><div class=\"line\">                _objc_inform(<span class=\"string\">\"__weak variable at %p holds %p instead of %p. \"</span></div><div class=\"line\">                             <span class=\"string\">\"This is probably incorrect use of \"</span></div><div class=\"line\">                             <span class=\"string\">\"objc_storeWeak() and objc_loadWeak(). \"</span></div><div class=\"line\">                             <span class=\"string\">\"Break on objc_weak_error to debug.\\n\"</span>, </div><div class=\"line\">                             referrer, (<span class=\"keyword\">void</span>*)*referrer, (<span class=\"keyword\">void</span>*)referent);</div><div class=\"line\">                objc_weak_error();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    weak_entry_remove(weak_table, entry);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如方法中，通过<code>referent</code>,找到保存指向该对象的所有引用的实例<code>entry</code>，通过循环，将<code>entry</code>中的所有引用置为<code>nil</code>即可</p>\n<h2 id=\"weak引用表图解\"><a href=\"#weak引用表图解\" class=\"headerlink\" title=\"weak引用表图解\"></a>weak引用表图解</h2><p><img src=\"http://omhkfini5.bkt.clouddn.com/weak5.png\" alt=\"\"></p>\n<p>参考资料<br><br><a href=\"http://www.jianshu.com/p/ef6d9bf8fe59\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/ef6d9bf8fe59</a><br><br><a href=\"http://kylinroc.github.io/objc-retain-release.html\" target=\"_blank\" rel=\"external\">http://kylinroc.github.io/objc-retain-release.html</a><br><br><a href=\"http://ios.jobbole.com/89012/\" target=\"_blank\" rel=\"external\">http://ios.jobbole.com/89012/</a></p>\n","excerpt":"","more":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>assign与weak有什么区别？面试的时候常常会被问到此问题，我们会回答weak修饰在对象释放时会自动变为nil,那么底层是怎么实现的呢？今天让我们来探讨一下，本文使用的runtime源码为大神提供的可编译版本<a href=\"https://github.com/isaacselement/objc4-706\">objc4-706</a></p>\n<h2 id=\"storeWeak…\"><a href=\"#storeWeak…\" class=\"headerlink\" title=\"storeWeak…\"></a>storeWeak…</h2><p>与weak相关的操作，应该都调用了次方法，稍后看一下这个方法的实现，首先做一下准备工作</p>\n<p>我首先在项目中定义了两个类Person、Like实现如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">@interface Person : NSObject</div><div class=\"line\">@property (atomic,weak) Like *like;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)logLikeAddress;</div><div class=\"line\">@end</div><div class=\"line\"></div><div class=\"line\">@implementation Person</div><div class=\"line\">- (<span class=\"keyword\">void</span>)logLikeAddress</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%p\"</span>,&amp;_like);</div><div class=\"line\">&#125;</div><div class=\"line\">@end</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Like其实什么也没实现😂</span></div><div class=\"line\">@interface Like : NSObject</div><div class=\"line\">@end</div><div class=\"line\">@implementation Like</div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p>其中main函数为</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addLike</span><span class=\"params\">(Person* person)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    Like *like = [[Like alloc] init];</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%p\\n\"</span>,like);</div><div class=\"line\">    [person logLikeAddress];</div><div class=\"line\">    person.like = like;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        <span class=\"comment\">// insert code here...</span></div><div class=\"line\">        Person *person = [[Person alloc] init];</div><div class=\"line\">        addLike(person);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>准备工作已经就绪了，我们在<code>Person</code>的中<code>weak</code>修饰的属性下断点，并单步调试，会发现如下的函数调用栈</p>\n<p><img src=\"http://omhkfini5.bkt.clouddn.com/b2.png\" alt=\"\"></p>\n<p>我们发现了关键的函数<code>objc_storeWeak(...)</code>,下面我们要详细的探讨这一函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">bool</span> HaveOld, <span class=\"keyword\">bool</span> HaveNew, <span class=\"keyword\">bool</span> CrashIfDeallocating&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> id </div><div class=\"line\"><span class=\"title\">storeWeak</span><span class=\"params\">(id *location, objc_object *newObj)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    assert(HaveOld  ||  HaveNew);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!HaveNew) assert(newObj == nil);</div><div class=\"line\"></div><div class=\"line\">    Class previouslyInitializedClass = nil;</div><div class=\"line\">    id oldObj;</div><div class=\"line\">    <span class=\"comment\">// 新旧引用表创建</span></div><div class=\"line\">    SideTable *oldTable;</div><div class=\"line\">    SideTable *newTable;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Acquire locks for old and new values.</span></div><div class=\"line\">    <span class=\"comment\">// Order by lock address to prevent lock ordering problems. </span></div><div class=\"line\">    <span class=\"comment\">// Retry if the old value changes underneath us.</span></div><div class=\"line\"> retry:</div><div class=\"line\">    <span class=\"keyword\">if</span> (HaveOld) &#123;</div><div class=\"line\">        <span class=\"comment\">// 获取旧引用表</span></div><div class=\"line\">        oldObj = *location;</div><div class=\"line\">        oldTable = &amp;SideTables()[oldObj];</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        oldTable = nil;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (HaveNew) &#123;</div><div class=\"line\">        <span class=\"comment\">// 获取新引用表</span></div><div class=\"line\">        newTable = &amp;SideTables()[newObj];</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        newTable = nil;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 加锁</span></div><div class=\"line\">    SideTable::lockTwo&lt;HaveOld, HaveNew&gt;(oldTable, newTable);</div><div class=\"line\">    <span class=\"comment\">// location 应该与 oldObj 保持一致，否则重新获取</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (HaveOld  &amp;&amp;  *location != oldObj) &#123;</div><div class=\"line\">        SideTable::unlockTwo&lt;HaveOld, HaveNew&gt;(oldTable, newTable);</div><div class=\"line\">        <span class=\"keyword\">goto</span> retry;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Prevent a deadlock between the weak reference machinery</span></div><div class=\"line\">    <span class=\"comment\">// and the +initialize machinery by ensuring that no </span></div><div class=\"line\">    <span class=\"comment\">// weakly-referenced object has an un-+initialized isa.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (HaveNew  &amp;&amp;  newObj) &#123;</div><div class=\"line\">        Class cls = newObj-&gt;getIsa();</div><div class=\"line\">        <span class=\"keyword\">if</span> (cls != previouslyInitializedClass  &amp;&amp;  </div><div class=\"line\">            !((objc_class *)cls)-&gt;isInitialized()) </div><div class=\"line\">        &#123;</div><div class=\"line\">            SideTable::unlockTwo&lt;HaveOld, HaveNew&gt;(oldTable, newTable);</div><div class=\"line\">            _class_initialize(_class_getNonMetaClass(cls, (id)newObj));</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// If this class is finished with +initialize then we're good.</span></div><div class=\"line\">            <span class=\"comment\">// If this class is still running +initialize on this thread </span></div><div class=\"line\">            <span class=\"comment\">// (i.e. +initialize called storeWeak on an instance of itself)</span></div><div class=\"line\">            <span class=\"comment\">// then we may proceed but it will appear initializing and </span></div><div class=\"line\">            <span class=\"comment\">// not yet initialized to the check above.</span></div><div class=\"line\">            <span class=\"comment\">// Instead set previouslyInitializedClass to recognize it on retry.</span></div><div class=\"line\">            previouslyInitializedClass = cls;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">goto</span> retry;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Clean up old value, if any. 清除旧值</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (HaveOld) &#123;</div><div class=\"line\">        weak_unregister_no_lock(&amp;oldTable-&gt;weak_table, oldObj, location);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Assign new value, if any. 设置新值</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (HaveNew) &#123;</div><div class=\"line\">        newObj = (objc_object *)weak_register_no_lock(&amp;newTable-&gt;weak_table, </div><div class=\"line\">                                                      (id)newObj, location, </div><div class=\"line\">                                                      CrashIfDeallocating);</div><div class=\"line\">        <span class=\"comment\">// weak_register_no_lock returns nil if weak store should be rejected</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Set is-weakly-referenced bit in refcount table.</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (newObj  &amp;&amp;  !newObj-&gt;isTaggedPointer()) &#123;</div><div class=\"line\">            <span class=\"comment\">// 标记该对象是一个弱引用</span></div><div class=\"line\">            newObj-&gt;setWeaklyReferenced_nolock();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Do not set *location anywhere else. That would introduce a race.</span></div><div class=\"line\">        *location = (id)newObj;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// No new value. The storage is not changed.</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    SideTable::unlockTwo&lt;HaveOld, HaveNew&gt;(oldTable, newTable);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> (id)newObj;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在此方法中，我们可以看见一些关键点， <code>SideTable</code>， <code>weak_unregister_no_lock(...)</code>， <code>weak_register_no_lock（...）</code>，下面我们会逐一介绍</p>\n<h2 id=\"引用计数和弱引用依赖表-SideTable\"><a href=\"#引用计数和弱引用依赖表-SideTable\" class=\"headerlink\" title=\"引用计数和弱引用依赖表 SideTable\"></a>引用计数和弱引用依赖表 SideTable</h2><p>SideTable 是一个结构体，主要用于管理对象的引用计数和 weak 表。在 NSObject.mm 中声明其数据结构</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> SideTable &#123;</div><div class=\"line\">    <span class=\"comment\">//自旋锁</span></div><div class=\"line\">    <span class=\"keyword\">spinlock_t</span> slock;</div><div class=\"line\">    <span class=\"comment\">// 引用计数表</span></div><div class=\"line\">    RefcountMap refcnts;</div><div class=\"line\">    <span class=\"comment\">// 弱引用表</span></div><div class=\"line\">    <span class=\"keyword\">weak_table_t</span> weak_table;</div><div class=\"line\"></div><div class=\"line\">    SideTable() &#123;</div><div class=\"line\">        <span class=\"built_in\">memset</span>(&amp;weak_table, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(weak_table));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ~SideTable() &#123;</div><div class=\"line\">        _objc_fatal(<span class=\"string\">\"Do not delete SideTable.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span> </span>&#123; slock.lock(); &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span> </span>&#123; slock.unlock(); &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Address-ordered lock discipline for a pair of side tables.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">bool</span> HaveOld, <span class=\"keyword\">bool</span> HaveNew&gt;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">lockTwo</span><span class=\"params\">(SideTable *lock1, SideTable *lock2)</span></span>;</div><div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">bool</span> HaveOld, <span class=\"keyword\">bool</span> HaveNew&gt;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">unlockTwo</span><span class=\"params\">(SideTable *lock1, SideTable *lock2)</span></span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>对于该结构体中的<code>slock</code>,<code>refcnts</code>,暂时我们不做讨论，我们主要讨论与弱引用相关的<code>weak_table</code>作用，其中<code>weak_table_t</code>的结构如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> <span class=\"keyword\">weak_table_t</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 保存了所有指向指定对象的 weak 指针</span></div><div class=\"line\">    <span class=\"keyword\">weak_entry_t</span> *weak_entries;</div><div class=\"line\">    <span class=\"comment\">// 存储空间</span></div><div class=\"line\">    <span class=\"keyword\">size_t</span>    num_entries;</div><div class=\"line\">    <span class=\"comment\">// 参与判断引用计数辅助量</span></div><div class=\"line\">    <span class=\"keyword\">uintptr_t</span> mask;</div><div class=\"line\">    <span class=\"comment\">// hash key 最大偏移值</span></div><div class=\"line\">    <span class=\"keyword\">uintptr_t</span> max_hash_displacement;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这是一个全局弱引用表。使用不定类型对象的地址作为 key ，用<code>weak_entry_t</code>类型结构体对象作为value。其中的<code>weak_entries</code>成员，从字面意思上看，即为弱引用表入口。其实现也是这样的</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> WEAK_INLINE_COUNT 4</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REFERRERS_OUT_OF_LINE 2</span></div><div class=\"line\"><span class=\"keyword\">struct</span> <span class=\"keyword\">weak_entry_t</span> &#123;</div><div class=\"line\">    DisguisedPtr&lt;objc_object&gt; referent;</div><div class=\"line\">    <span class=\"keyword\">union</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">weak_referrer_t</span> *referrers;</div><div class=\"line\">            <span class=\"keyword\">uintptr_t</span>        out_of_line_ness : <span class=\"number\">2</span>;</div><div class=\"line\">            <span class=\"keyword\">uintptr_t</span>        num_refs : PTR_MINUS_2;</div><div class=\"line\">            <span class=\"keyword\">uintptr_t</span>        mask;</div><div class=\"line\">            <span class=\"keyword\">uintptr_t</span>        max_hash_displacement;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// out_of_line_ness field is low bits of inline_referrers[1]</span></div><div class=\"line\">            <span class=\"keyword\">weak_referrer_t</span>  inline_referrers[WEAK_INLINE_COUNT];</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">out_of_line</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (out_of_line_ness == REFERRERS_OUT_OF_LINE);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">weak_entry_t</span>&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> <span class=\"keyword\">weak_entry_t</span>&amp; other) &#123;</div><div class=\"line\">        <span class=\"built_in\">memcpy</span>(<span class=\"keyword\">this</span>, &amp;other, <span class=\"keyword\">sizeof</span>(other));</div><div class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">weak_entry_t</span>(objc_object *newReferent, objc_object **newReferrer)</div><div class=\"line\">        : referent(newReferent)</div><div class=\"line\">    &#123;</div><div class=\"line\">        inline_referrers[<span class=\"number\">0</span>] = newReferrer;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; WEAK_INLINE_COUNT; i++) &#123;</div><div class=\"line\">            inline_referrers[i] = nil;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>让我们回到<code>storeWeak(...)</code>函数中，获取<code>oldTable</code>,与<code>newTable</code>,发现调用的函数为<code>&amp;SideTables()[newObj]</code>,<code>&amp;SideTables()[oldObj]</code>,其中该方法的实现为</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">alignas(StripedMap&lt;SideTable&gt;) <span class=\"keyword\">static</span> <span class=\"keyword\">uint8_t</span> SideTableBuf[<span class=\"keyword\">sizeof</span>(StripedMap&lt;SideTable&gt;)];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SideTableInit</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">new</span> (SideTableBuf) StripedMap&lt;SideTable&gt;();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> StripedMap&lt;SideTable&gt;&amp; SideTables() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">reinterpret_cast</span>&lt;StripedMap&lt;SideTable&gt;*&gt;(SideTableBuf);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div><div class=\"line\"><span class=\"keyword\">class</span> StripedMap &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">enum</span> &#123; CacheLineSize = <span class=\"number\">64</span> &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> TARGET_OS_EMBEDDED</span></div><div class=\"line\">    <span class=\"keyword\">enum</span> &#123; StripeCount = <span class=\"number\">8</span> &#125;;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\">    <span class=\"keyword\">enum</span> &#123; StripeCount = <span class=\"number\">64</span> &#125;;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">struct</span> PaddedT &#123;</div><div class=\"line\">        <span class=\"function\">T value <span class=\"title\">alignas</span><span class=\"params\">(CacheLineSize)</span></span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    PaddedT <span class=\"built_in\">array</span>[StripeCount];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"title\">indexForPointer</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *p)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">uintptr_t</span> addr = <span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">uintptr_t</span>&gt;(p);</div><div class=\"line\">        <span class=\"keyword\">return</span> ((addr &gt;&gt; <span class=\"number\">4</span>) ^ (addr &gt;&gt; <span class=\"number\">9</span>)) % StripeCount;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">public</span>:</div><div class=\"line\">    T&amp; <span class=\"keyword\">operator</span>[] (<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *p) &#123; </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">array</span>[indexForPointer(p)].value; </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">const</span> T&amp; <span class=\"keyword\">operator</span>[] (<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *p) <span class=\"keyword\">const</span> &#123; </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">const_cast</span>&lt;StripedMap&lt;T&gt;&gt;(<span class=\"keyword\">this</span>)[p]; </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>在上面我们可以看出<code>StripedMap</code>是一个模板类（Template Class），通过传入类（结构体）参数，会动态修改在该类中的一个 array 成员存储的元素类型，并且其中提供了一个针对于地址的 hash 算法，用作存储key。可以说， <code>StripedMap</code> 提供了一套拥有将地址作为 key 的 hash table 解决方案，而该方案采用了模板类，是拥有泛型性的,在这个类中有一个 array 成员，用来存储 <code>PaddedT</code> 对象，并且其中对于 [] 符的重载定义中，会返回这个 PaddedT 的 value 成员，这个 value 就是我们传入的 T 泛型成员，也就是 <code>SideTable</code> 对象。在 array 的下标中，这里使用了 <code>indexForPointer</code> 方法通过位运算计算下标，实现了静态的 Hash Table。而在 <code>weak_table</code> 中，其成员 <code>weak_entry</code>会将传入对象的地址加以封装起来，并且其中也有访问全局弱引用表的入口</p>\n<h2 id=\"weak-register-no-lock-…\"><a href=\"#weak-register-no-lock-…\" class=\"headerlink\" title=\"weak_register_no_lock(…)\"></a>weak_register_no_lock(…)</h2><p>该方法将弱引用对象注册到弱引用表中，我们看一下它的具体实现</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">id </div><div class=\"line\"><span class=\"title\">weak_register_no_lock</span><span class=\"params\">(<span class=\"keyword\">weak_table_t</span> *weak_table, id referent_id, </div><div class=\"line\">                      id *referrer_id, <span class=\"keyword\">bool</span> crashIfDeallocating)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// weak对象的引用 即like</span></div><div class=\"line\">    objc_object *referent = (objc_object *)referent_id;</div><div class=\"line\">    <span class=\"comment\">// 指向weak对象的引用的指针 即Person对象中的&amp;like 可理解为&amp;(person.like)</span></div><div class=\"line\">    objc_object **referrer = (objc_object **)referrer_id;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//判断TaggedPointer</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!referent  ||  referent-&gt;isTaggedPointer()) <span class=\"keyword\">return</span> referent_id;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// ensure that the referenced object is viable 保证对象是可以访问的</span></div><div class=\"line\">    <span class=\"keyword\">bool</span> deallocating;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!referent-&gt;ISA()-&gt;hasCustomRR()) &#123;</div><div class=\"line\">        deallocating = referent-&gt;rootIsDeallocating();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        BOOL (*allowsWeakReference)(objc_object *, SEL) = </div><div class=\"line\">            (BOOL(*)(objc_object *, SEL))</div><div class=\"line\">            object_getMethodImplementation((id)referent, </div><div class=\"line\">                                           SEL_allowsWeakReference);</div><div class=\"line\">        <span class=\"keyword\">if</span> ((IMP)allowsWeakReference == _objc_msgForward) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> nil;</div><div class=\"line\">        &#125;</div><div class=\"line\">        deallocating =</div><div class=\"line\">            ! (*allowsWeakReference)(referent, SEL_allowsWeakReference);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (deallocating) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (crashIfDeallocating) &#123;</div><div class=\"line\">            _objc_fatal(<span class=\"string\">\"Cannot form weak reference to instance (%p) of \"</span></div><div class=\"line\">                        <span class=\"string\">\"class %s. It is possible that this object was \"</span></div><div class=\"line\">                        <span class=\"string\">\"over-released, or is in the process of deallocation.\"</span>,</div><div class=\"line\">                        (<span class=\"keyword\">void</span>*)referent, object_getClassName((id)referent));</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> nil;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// now remember it and where it is being stored</span></div><div class=\"line\">    <span class=\"keyword\">weak_entry_t</span> *entry;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((entry = weak_entry_for_referent(weak_table, referent))) &#123;</div><div class=\"line\">        append_referrer(entry, referrer);</div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 该对象第一次插入</span></div><div class=\"line\">        <span class=\"keyword\">weak_entry_t</span> new_entry(referent, referrer);</div><div class=\"line\">        <span class=\"comment\">// 是否需要扩容表长度</span></div><div class=\"line\">        weak_grow_maybe(weak_table);</div><div class=\"line\">        <span class=\"comment\">// 插入表</span></div><div class=\"line\">        weak_entry_insert(weak_table, &amp;new_entry);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Do not set *referrer. objc_storeWeak() requires that the </span></div><div class=\"line\">    <span class=\"comment\">// value not change.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> referent_id;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>总结一下，我们weak对象的引用,与指向weak对象的引用，传入此函数中，假设是首次保存此weak对象的引用，构建出<code>weak_entry_t</code>的实例<br><code>new_entry</code>,判断当前的弱引用表是否需要增加长度，然后将<code>new_entry</code>插入到弱引用表<code>weak_table</code>中；如若不是第一次保存，首先取出旧的<code>entry</code>，并将指向weak对象的引用（即&amp;(person.like)）保存在<code>entry</code>中。<br>所以可以看出，一个<code>entry</code>中保存了所有指向该weak对象的弱引用</p>\n<h2 id=\"weak-unregister-no-lock-…\"><a href=\"#weak-unregister-no-lock-…\" class=\"headerlink\" title=\"weak_unregister_no_lock(…)\"></a>weak_unregister_no_lock(…)</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span></div><div class=\"line\"><span class=\"title\">weak_unregister_no_lock</span><span class=\"params\">(<span class=\"keyword\">weak_table_t</span> *weak_table, id referent_id, </div><div class=\"line\">                        id *referrer_id)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    objc_object *referent = (objc_object *)referent_id;</div><div class=\"line\">    objc_object **referrer = (objc_object **)referrer_id;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">weak_entry_t</span> *entry;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!referent) <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> ((entry = weak_entry_for_referent(weak_table, referent))) &#123;</div><div class=\"line\">        remove_referrer(entry, referrer);</div><div class=\"line\">        <span class=\"keyword\">bool</span> empty = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (entry-&gt;out_of_line()  &amp;&amp;  entry-&gt;num_refs != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            empty = <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; WEAK_INLINE_COUNT; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (entry-&gt;inline_referrers[i]) &#123;</div><div class=\"line\">                    empty = <span class=\"literal\">false</span>; </div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (empty) &#123;</div><div class=\"line\">            weak_entry_remove(weak_table, entry);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Do not set *referrer = nil. objc_storeWeak() requires that the </span></div><div class=\"line\">    <span class=\"comment\">// value not change.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中该方法就是<code>remove_referrer(entry, referrer);</code>,在<code>entry</code>中移除了<code>referrer</code>,弱引用表中不再保存指向该weak对象的引用</p>\n<h2 id=\"weak对象释放\"><a href=\"#weak对象释放\" class=\"headerlink\" title=\"weak对象释放\"></a>weak对象释放</h2><p><img src=\"http://omhkfini5.bkt.clouddn.com/weak2.png\" alt=\"\"><br>我们可以看见当一个被弱引用指向的对象释放时，会调用<code>weak_clear_no_lock(...)</code>方法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> </div><div class=\"line\"><span class=\"title\">weak_clear_no_lock</span><span class=\"params\">(<span class=\"keyword\">weak_table_t</span> *weak_table, id referent_id)</span> </div><div class=\"line\"></span>&#123;</div><div class=\"line\">    objc_object *referent = (objc_object *)referent_id;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">weak_entry_t</span> *entry = weak_entry_for_referent(weak_table, referent);</div><div class=\"line\">    <span class=\"keyword\">if</span> (entry == nil) &#123;</div><div class=\"line\">        <span class=\"comment\">/// XXX shouldn't happen, but does with mismatched CF/objc</span></div><div class=\"line\">        <span class=\"comment\">//printf(\"XXX no entry for clear deallocating %p\\n\", referent);</span></div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// zero out references</span></div><div class=\"line\">    <span class=\"keyword\">weak_referrer_t</span> *referrers;</div><div class=\"line\">    <span class=\"keyword\">size_t</span> count;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (entry-&gt;out_of_line()) &#123;</div><div class=\"line\">        referrers = entry-&gt;referrers;</div><div class=\"line\">        count = TABLE_SIZE(entry);</div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        referrers = entry-&gt;inline_referrers;</div><div class=\"line\">        count = WEAK_INLINE_COUNT;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; count; ++i) &#123;</div><div class=\"line\">        objc_object **referrer = referrers[i];</div><div class=\"line\">        <span class=\"keyword\">if</span> (referrer) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (*referrer == referent) &#123;</div><div class=\"line\">               <span class=\"comment\">//weak指向的对象，在释放时会被置nil的关键</span></div><div class=\"line\">                *referrer = nil;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*referrer) &#123;</div><div class=\"line\">                _objc_inform(<span class=\"string\">\"__weak variable at %p holds %p instead of %p. \"</span></div><div class=\"line\">                             <span class=\"string\">\"This is probably incorrect use of \"</span></div><div class=\"line\">                             <span class=\"string\">\"objc_storeWeak() and objc_loadWeak(). \"</span></div><div class=\"line\">                             <span class=\"string\">\"Break on objc_weak_error to debug.\\n\"</span>, </div><div class=\"line\">                             referrer, (<span class=\"keyword\">void</span>*)*referrer, (<span class=\"keyword\">void</span>*)referent);</div><div class=\"line\">                objc_weak_error();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    weak_entry_remove(weak_table, entry);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如方法中，通过<code>referent</code>,找到保存指向该对象的所有引用的实例<code>entry</code>，通过循环，将<code>entry</code>中的所有引用置为<code>nil</code>即可</p>\n<h2 id=\"weak引用表图解\"><a href=\"#weak引用表图解\" class=\"headerlink\" title=\"weak引用表图解\"></a>weak引用表图解</h2><p><img src=\"http://omhkfini5.bkt.clouddn.com/weak5.png\" alt=\"\"></p>\n<p>参考资料</br><br><a href=\"http://www.jianshu.com/p/ef6d9bf8fe59\">http://www.jianshu.com/p/ef6d9bf8fe59</a></br><br><a href=\"http://kylinroc.github.io/objc-retain-release.html\">http://kylinroc.github.io/objc-retain-release.html</a></br><br><a href=\"http://ios.jobbole.com/89012/\">http://ios.jobbole.com/89012/</a></p>\n"},{"title":"iOS大解密之Load方法","date":"2017-03-08T09:45:43.000Z","_content":"\n受益于苹果的封闭生态，开发者常常不必关注太多的底层细节，就能做出界面美观，性能优良的App，当然其中Apple也大方的开放出了少许的源码，例如Runtime源码,感谢[http://blog.csdn.net/wotors/article/details/54426316](http://blog.csdn.net/wotors/article/details/54426316) 提供了可以编译成功的源码工程。\n\n## +load()\r\n我们来通过源码来探讨一下load方法的加载时机，和在父类，Category中的加载顺序\r\r首先我们在+load方法中打上断点，看到如下的执行过程\r\r![](http://omhkfini5.bkt.clouddn.com/load.jpg)\n\n通过runtime的源码我们可以找到load_images方法的具体实现，代码如下\n\n``` mm\n/***********************************************************************\n* load_images\n* Process +load in the given images which are being mapped in by dyld.\n*\n* Locking: write-locks runtimeLock and loadMethodLock\n**********************************************************************/\nextern bool hasLoadMethods(const headerType *mhdr);\nextern void prepare_load_methods(const headerType *mhdr);\n\nvoid\nload_images(const char *path __unused, const struct mach_header *mh)\n{\n    // Return without taking locks if there are no +load methods here.\n\n    if (!hasLoadMethods((const headerType *)mh)) return;\n\n    recursive_mutex_locker_t lock(loadMethodLock);\n\n    // Discover load methods\n    {\n        rwlock_writer_t lock2(runtimeLock);\n        prepare_load_methods((const headerType *)mh);\n    }\n\n    // Call +load methods (without runtimeLock - re-entrant)\n    call_load_methods();\n}\n\n```\n\n在这里我们可以发现两个关键的方法，prepare_load_methods(…) call_load_methods()\r\r``` mm\nvoid prepare_load_methods(const headerType *mhdr)\n{\n    size_t count, i;\n\n    runtimeLock.assertWriting();\n\n    classref_t *classlist = \n        _getObjc2NonlazyClassList(mhdr, &count);\n    for (i = 0; i < count; i++) {\n        schedule_class_load(remapClass(classlist[i]));\n    }\n\n    category_t **categorylist = _getObjc2NonlazyCategoryList(mhdr, &count);\n    for (i = 0; i < count; i++) {\n        category_t *cat = categorylist[i];\n        Class cls = remapClass(cat->cls);\n        if (!cls) continue;  // category for ignored weak-linked class\n        realizeClass(cls);\n        assert(cls->ISA()->isRealized());\n        add_category_to_loadable_list(cat);\n    }\n}\n```\n\n``` mm\nstatic void schedule_class_load(Class cls)\n{\n    if (cls->info & CLS_LOADED) return;\n    if (cls->superclass) schedule_class_load(cls->superclass);\n    printf(\"%s\\n\\n\",class_getName(cls));\n    add_class_to_loadable_list(cls);\n    cls->info |= CLS_LOADED;\n}\n```\n\n其中我们在void prepare_load_methods(const headerType *mhdr)方法中明显可以看出，先处理Class的相关信息，后处理Category的相关信息，在处理Class时会进入到static void schedule_class_load(Class cls)方法中,在此方法中会递归的寻找到父类，然后调用其add_class_to_loadable_list(cls)的信息\n\n``` mm\nvoid add_class_to_loadable_list(Class cls)\n{\n    IMP method;\n\n    loadMethodLock.assertLocked();\n\n    method = cls->getLoadMethod();\n    if (!method) return;  // Don't bother if cls has no +load method\n    \n    if (PrintLoading) {\n        _objc_inform(\"LOAD: class '%s' scheduled for +load\", \n                     cls->nameForLogging());\n    }\n    \n    if (loadable_classes_used == loadable_classes_allocated) {\n        loadable_classes_allocated = loadable_classes_allocated*2 + 16;\n        loadable_classes = (struct loadable_class *)\n            realloc(loadable_classes,\n                              loadable_classes_allocated *\n                              sizeof(struct loadable_class));\n    }\n    \n    loadable_classes[loadable_classes_used].cls = cls;\n    loadable_classes[loadable_classes_used].method = method;\n    loadable_classes_used++;\n}\n\n```\n\n在这里判断了Class中是否实现了+load方法,若实现了把该Class顺序存储到loadable_classes中,Category同理也调用了相关方法，将实现的load方法的category添加到了list中，如下图\n\r``` mm\n/***********************************************************************\n* add_category_to_loadable_list\n* Category cat's parent class exists and the category has been attached\n* to its class. Schedule this category for +load after its parent class\n* becomes connected and has its own +load method called.\n**********************************************************************/\nvoid add_category_to_loadable_list(Category cat)\n{\n    IMP method;\n\n    loadMethodLock.assertLocked();\n\n    method = _category_getLoadMethod(cat);\n\n    // Don't bother if cat has no +load method\n    if (!method) return;\n\n    if (PrintLoading) {\n        _objc_inform(\"LOAD: category '%s(%s)' scheduled for +load\", \n                     _category_getClassName(cat), _category_getName(cat));\n    }\n    \n    if (loadable_categories_used == loadable_categories_allocated) {\n        loadable_categories_allocated = loadable_categories_allocated*2 + 16;\n        loadable_categories = (struct loadable_category *)\n            realloc(loadable_categories,\n                              loadable_categories_allocated *\n                              sizeof(struct loadable_category));\n    }\n\n    loadable_categories[loadable_categories_used].cat = cat;\n    loadable_categories[loadable_categories_used].method = method;\n    loadable_categories_used++;\n}\n\n```\n\n到这里prepare_load_methods(…)这个方法的使命就算结束了，我们找到了可以执行load方法的Class和Category，接下来让我们看一下执行的步骤\r\r``` mm\nvoid call_load_methods(void)\n{\n    static bool loading = NO;\n    bool more_categories;\n\n    loadMethodLock.assertLocked();\n\n    // Re-entrant calls do nothing; the outermost call will finish the job.\n    if (loading) return;\n    loading = YES;\n\n    void *pool = objc_autoreleasePoolPush();\n\n    do {\n        // 1. Repeatedly call class +loads until there aren't any more\n        while (loadable_classes_used > 0) {\n            call_class_loads();\n        }\n\n        // 2. Call category +loads ONCE\n        more_categories = call_category_loads();\n\n        // 3. Run more +loads if there are classes OR more untried categories\n    } while (loadable_classes_used > 0  ||  more_categories);\n\n    objc_autoreleasePoolPop(pool);\n\n    loading = NO;\n}\n\n```\n\n关键方法 call_class_loads() call_category_loads(),可以看出是先执行的Class中的load方法，再执行Category中的load方法，下面是两个方法的具体实现\r\r``` mm\n/***********************************************************************\n* call_class_loads\n* Call all pending class +load methods.\n* If new classes become loadable, +load is NOT called for them.\n*\n* Called only by call_load_methods().\n**********************************************************************/\nstatic void call_class_loads(void)\n{\n    int i;\n    \n    // Detach current loadable list.\n    struct loadable_class *classes = loadable_classes;\n    int used = loadable_classes_used;\n    loadable_classes = nil;\n    loadable_classes_allocated = 0;\n    loadable_classes_used = 0;\n    \n    // Call all +loads for the detached list.\n    for (i = 0; i < used; i++) {\n        Class cls = classes[i].cls;\n        load_method_t load_method = (load_method_t)classes[i].method;\n        if (!cls) continue; \n\n        if (PrintLoading) {\n            _objc_inform(\"LOAD: +[%s load]\\n\", cls->nameForLogging());\n        }\n        (*load_method)(cls, SEL_load);\n    }\n    \n    // Destroy the detached list.\n    if (classes) free(classes);\n}\n```\n\n```\n/***********************************************************************\n* call_category_loads\n* Call some pending category +load methods.\n* The parent class of the +load-implementing categories has all of \n*   its categories attached, in case some are lazily waiting for +initalize.\n* Don't call +load unless the parent class is connected.\n* If new categories become loadable, +load is NOT called, and they \n*   are added to the end of the loadable list, and we return TRUE.\n* Return FALSE if no new categories became loadable.\n*\n* Called only by call_load_methods().\n**********************************************************************/\nstatic bool call_category_loads(void)\n{\n    int i, shift;\n    bool new_categories_added = NO;\n    \n    // Detach current loadable list.\n    struct loadable_category *cats = loadable_categories;\n    int used = loadable_categories_used;\n    int allocated = loadable_categories_allocated;\n    loadable_categories = nil;\n    loadable_categories_allocated = 0;\n    loadable_categories_used = 0;\n\n    // Call all +loads for the detached list.\n    for (i = 0; i < used; i++) {\n        Category cat = cats[i].cat;\n        load_method_t load_method = (load_method_t)cats[i].method;\n        Class cls;\n        if (!cat) continue;\n\n        cls = _category_getClass(cat);\n        if (cls  &&  cls->isLoadable()) {\n            if (PrintLoading) {\n                _objc_inform(\"LOAD: +[%s(%s) load]\\n\", \n                             cls->nameForLogging(), \n                             _category_getName(cat));\n            }\n            (*load_method)(cls, SEL_load);\n            cats[i].cat = nil;\n        }\n    }\n\n    // Compact detached list (order-preserving)\n    shift = 0;\n    for (i = 0; i < used; i++) {\n        if (cats[i].cat) {\n            cats[i-shift] = cats[i];\n        } else {\n            shift++;\n        }\n    }\n    used -= shift;\n\n    // Copy any new +load candidates from the new list to the detached list.\n    new_categories_added = (loadable_categories_used > 0);\n    for (i = 0; i < loadable_categories_used; i++) {\n        if (used == allocated) {\n            allocated = allocated*2 + 16;\n            cats = (struct loadable_category *)\n                realloc(cats, allocated *\n                                  sizeof(struct loadable_category));\n        }\n        cats[used++] = loadable_categories[i];\n    }\n\n    // Destroy the new list.\n    if (loadable_categories) free(loadable_categories);\n\n    // Reattach the (now augmented) detached list. \n    // But if there's nothing left to load, destroy the list.\n    if (used) {\n        loadable_categories = cats;\n        loadable_categories_used = used;\n        loadable_categories_allocated = allocated;\n    } else {\n        if (cats) free(cats);\n        loadable_categories = nil;\n        loadable_categories_used = 0;\n        loadable_categories_allocated = 0;\n    }\n\n    if (PrintLoading) {\n        if (loadable_categories_used != 0) {\n            _objc_inform(\"LOAD: %d categories still waiting for +load\\n\",\n                         loadable_categories_used);\n        }\n    }\n\n    return new_categories_added;\n}\n```\n\n## 总结\n+load方法通过函数指针调用，而不是objc_msgSend\r+load方法的调用时机是在Runtime初始化的时候，其中的调用顺序是父类->子类->分类，其中默认调用一次，在Class中和Category中都实现了load方法，则在两者之间都会调用，且在子类实现+load方法时不需要显示的调用[super load]\r","source":"_posts/iOS-load-methodDes.md","raw":"---\ntitle: iOS大解密之Load方法\ndate: 2017-03-08 17:45:43\ntags: iOS\n---\n\n受益于苹果的封闭生态，开发者常常不必关注太多的底层细节，就能做出界面美观，性能优良的App，当然其中Apple也大方的开放出了少许的源码，例如Runtime源码,感谢[http://blog.csdn.net/wotors/article/details/54426316](http://blog.csdn.net/wotors/article/details/54426316) 提供了可以编译成功的源码工程。\n\n## +load()\r\n我们来通过源码来探讨一下load方法的加载时机，和在父类，Category中的加载顺序\r\r首先我们在+load方法中打上断点，看到如下的执行过程\r\r![](http://omhkfini5.bkt.clouddn.com/load.jpg)\n\n通过runtime的源码我们可以找到load_images方法的具体实现，代码如下\n\n``` mm\n/***********************************************************************\n* load_images\n* Process +load in the given images which are being mapped in by dyld.\n*\n* Locking: write-locks runtimeLock and loadMethodLock\n**********************************************************************/\nextern bool hasLoadMethods(const headerType *mhdr);\nextern void prepare_load_methods(const headerType *mhdr);\n\nvoid\nload_images(const char *path __unused, const struct mach_header *mh)\n{\n    // Return without taking locks if there are no +load methods here.\n\n    if (!hasLoadMethods((const headerType *)mh)) return;\n\n    recursive_mutex_locker_t lock(loadMethodLock);\n\n    // Discover load methods\n    {\n        rwlock_writer_t lock2(runtimeLock);\n        prepare_load_methods((const headerType *)mh);\n    }\n\n    // Call +load methods (without runtimeLock - re-entrant)\n    call_load_methods();\n}\n\n```\n\n在这里我们可以发现两个关键的方法，prepare_load_methods(…) call_load_methods()\r\r``` mm\nvoid prepare_load_methods(const headerType *mhdr)\n{\n    size_t count, i;\n\n    runtimeLock.assertWriting();\n\n    classref_t *classlist = \n        _getObjc2NonlazyClassList(mhdr, &count);\n    for (i = 0; i < count; i++) {\n        schedule_class_load(remapClass(classlist[i]));\n    }\n\n    category_t **categorylist = _getObjc2NonlazyCategoryList(mhdr, &count);\n    for (i = 0; i < count; i++) {\n        category_t *cat = categorylist[i];\n        Class cls = remapClass(cat->cls);\n        if (!cls) continue;  // category for ignored weak-linked class\n        realizeClass(cls);\n        assert(cls->ISA()->isRealized());\n        add_category_to_loadable_list(cat);\n    }\n}\n```\n\n``` mm\nstatic void schedule_class_load(Class cls)\n{\n    if (cls->info & CLS_LOADED) return;\n    if (cls->superclass) schedule_class_load(cls->superclass);\n    printf(\"%s\\n\\n\",class_getName(cls));\n    add_class_to_loadable_list(cls);\n    cls->info |= CLS_LOADED;\n}\n```\n\n其中我们在void prepare_load_methods(const headerType *mhdr)方法中明显可以看出，先处理Class的相关信息，后处理Category的相关信息，在处理Class时会进入到static void schedule_class_load(Class cls)方法中,在此方法中会递归的寻找到父类，然后调用其add_class_to_loadable_list(cls)的信息\n\n``` mm\nvoid add_class_to_loadable_list(Class cls)\n{\n    IMP method;\n\n    loadMethodLock.assertLocked();\n\n    method = cls->getLoadMethod();\n    if (!method) return;  // Don't bother if cls has no +load method\n    \n    if (PrintLoading) {\n        _objc_inform(\"LOAD: class '%s' scheduled for +load\", \n                     cls->nameForLogging());\n    }\n    \n    if (loadable_classes_used == loadable_classes_allocated) {\n        loadable_classes_allocated = loadable_classes_allocated*2 + 16;\n        loadable_classes = (struct loadable_class *)\n            realloc(loadable_classes,\n                              loadable_classes_allocated *\n                              sizeof(struct loadable_class));\n    }\n    \n    loadable_classes[loadable_classes_used].cls = cls;\n    loadable_classes[loadable_classes_used].method = method;\n    loadable_classes_used++;\n}\n\n```\n\n在这里判断了Class中是否实现了+load方法,若实现了把该Class顺序存储到loadable_classes中,Category同理也调用了相关方法，将实现的load方法的category添加到了list中，如下图\n\r``` mm\n/***********************************************************************\n* add_category_to_loadable_list\n* Category cat's parent class exists and the category has been attached\n* to its class. Schedule this category for +load after its parent class\n* becomes connected and has its own +load method called.\n**********************************************************************/\nvoid add_category_to_loadable_list(Category cat)\n{\n    IMP method;\n\n    loadMethodLock.assertLocked();\n\n    method = _category_getLoadMethod(cat);\n\n    // Don't bother if cat has no +load method\n    if (!method) return;\n\n    if (PrintLoading) {\n        _objc_inform(\"LOAD: category '%s(%s)' scheduled for +load\", \n                     _category_getClassName(cat), _category_getName(cat));\n    }\n    \n    if (loadable_categories_used == loadable_categories_allocated) {\n        loadable_categories_allocated = loadable_categories_allocated*2 + 16;\n        loadable_categories = (struct loadable_category *)\n            realloc(loadable_categories,\n                              loadable_categories_allocated *\n                              sizeof(struct loadable_category));\n    }\n\n    loadable_categories[loadable_categories_used].cat = cat;\n    loadable_categories[loadable_categories_used].method = method;\n    loadable_categories_used++;\n}\n\n```\n\n到这里prepare_load_methods(…)这个方法的使命就算结束了，我们找到了可以执行load方法的Class和Category，接下来让我们看一下执行的步骤\r\r``` mm\nvoid call_load_methods(void)\n{\n    static bool loading = NO;\n    bool more_categories;\n\n    loadMethodLock.assertLocked();\n\n    // Re-entrant calls do nothing; the outermost call will finish the job.\n    if (loading) return;\n    loading = YES;\n\n    void *pool = objc_autoreleasePoolPush();\n\n    do {\n        // 1. Repeatedly call class +loads until there aren't any more\n        while (loadable_classes_used > 0) {\n            call_class_loads();\n        }\n\n        // 2. Call category +loads ONCE\n        more_categories = call_category_loads();\n\n        // 3. Run more +loads if there are classes OR more untried categories\n    } while (loadable_classes_used > 0  ||  more_categories);\n\n    objc_autoreleasePoolPop(pool);\n\n    loading = NO;\n}\n\n```\n\n关键方法 call_class_loads() call_category_loads(),可以看出是先执行的Class中的load方法，再执行Category中的load方法，下面是两个方法的具体实现\r\r``` mm\n/***********************************************************************\n* call_class_loads\n* Call all pending class +load methods.\n* If new classes become loadable, +load is NOT called for them.\n*\n* Called only by call_load_methods().\n**********************************************************************/\nstatic void call_class_loads(void)\n{\n    int i;\n    \n    // Detach current loadable list.\n    struct loadable_class *classes = loadable_classes;\n    int used = loadable_classes_used;\n    loadable_classes = nil;\n    loadable_classes_allocated = 0;\n    loadable_classes_used = 0;\n    \n    // Call all +loads for the detached list.\n    for (i = 0; i < used; i++) {\n        Class cls = classes[i].cls;\n        load_method_t load_method = (load_method_t)classes[i].method;\n        if (!cls) continue; \n\n        if (PrintLoading) {\n            _objc_inform(\"LOAD: +[%s load]\\n\", cls->nameForLogging());\n        }\n        (*load_method)(cls, SEL_load);\n    }\n    \n    // Destroy the detached list.\n    if (classes) free(classes);\n}\n```\n\n```\n/***********************************************************************\n* call_category_loads\n* Call some pending category +load methods.\n* The parent class of the +load-implementing categories has all of \n*   its categories attached, in case some are lazily waiting for +initalize.\n* Don't call +load unless the parent class is connected.\n* If new categories become loadable, +load is NOT called, and they \n*   are added to the end of the loadable list, and we return TRUE.\n* Return FALSE if no new categories became loadable.\n*\n* Called only by call_load_methods().\n**********************************************************************/\nstatic bool call_category_loads(void)\n{\n    int i, shift;\n    bool new_categories_added = NO;\n    \n    // Detach current loadable list.\n    struct loadable_category *cats = loadable_categories;\n    int used = loadable_categories_used;\n    int allocated = loadable_categories_allocated;\n    loadable_categories = nil;\n    loadable_categories_allocated = 0;\n    loadable_categories_used = 0;\n\n    // Call all +loads for the detached list.\n    for (i = 0; i < used; i++) {\n        Category cat = cats[i].cat;\n        load_method_t load_method = (load_method_t)cats[i].method;\n        Class cls;\n        if (!cat) continue;\n\n        cls = _category_getClass(cat);\n        if (cls  &&  cls->isLoadable()) {\n            if (PrintLoading) {\n                _objc_inform(\"LOAD: +[%s(%s) load]\\n\", \n                             cls->nameForLogging(), \n                             _category_getName(cat));\n            }\n            (*load_method)(cls, SEL_load);\n            cats[i].cat = nil;\n        }\n    }\n\n    // Compact detached list (order-preserving)\n    shift = 0;\n    for (i = 0; i < used; i++) {\n        if (cats[i].cat) {\n            cats[i-shift] = cats[i];\n        } else {\n            shift++;\n        }\n    }\n    used -= shift;\n\n    // Copy any new +load candidates from the new list to the detached list.\n    new_categories_added = (loadable_categories_used > 0);\n    for (i = 0; i < loadable_categories_used; i++) {\n        if (used == allocated) {\n            allocated = allocated*2 + 16;\n            cats = (struct loadable_category *)\n                realloc(cats, allocated *\n                                  sizeof(struct loadable_category));\n        }\n        cats[used++] = loadable_categories[i];\n    }\n\n    // Destroy the new list.\n    if (loadable_categories) free(loadable_categories);\n\n    // Reattach the (now augmented) detached list. \n    // But if there's nothing left to load, destroy the list.\n    if (used) {\n        loadable_categories = cats;\n        loadable_categories_used = used;\n        loadable_categories_allocated = allocated;\n    } else {\n        if (cats) free(cats);\n        loadable_categories = nil;\n        loadable_categories_used = 0;\n        loadable_categories_allocated = 0;\n    }\n\n    if (PrintLoading) {\n        if (loadable_categories_used != 0) {\n            _objc_inform(\"LOAD: %d categories still waiting for +load\\n\",\n                         loadable_categories_used);\n        }\n    }\n\n    return new_categories_added;\n}\n```\n\n## 总结\n+load方法通过函数指针调用，而不是objc_msgSend\r+load方法的调用时机是在Runtime初始化的时候，其中的调用顺序是父类->子类->分类，其中默认调用一次，在Class中和Category中都实现了load方法，则在两者之间都会调用，且在子类实现+load方法时不需要显示的调用[super load]\r","slug":"iOS-load-methodDes","published":1,"updated":"2017-03-08T10:09:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d1x3490007p36d3vkljcku","content":"<p>受益于苹果的封闭生态，开发者常常不必关注太多的底层细节，就能做出界面美观，性能优良的App，当然其中Apple也大方的开放出了少许的源码，例如Runtime源码,感谢<a href=\"http://blog.csdn.net/wotors/article/details/54426316\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/wotors/article/details/54426316</a> 提供了可以编译成功的源码工程。</p>\n<h2 id=\"load\"><a href=\"#load\" class=\"headerlink\" title=\"+load()\"></a>+load()</h2><p>我们来通过源码来探讨一下load方法的加载时机，和在父类，Category中的加载顺序</p>\n<p>首先我们在+load方法中打上断点，看到如下的执行过程</p>\n<p><img src=\"http://omhkfini5.bkt.clouddn.com/load.jpg\" alt=\"\"></p>\n<p>通过runtime的源码我们可以找到load_images方法的具体实现，代码如下</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/***********************************************************************</span></div><div class=\"line\">* load_images</div><div class=\"line\">* Process +load in the given images which are being mapped in by dyld.</div><div class=\"line\">*</div><div class=\"line\">* Locking: write-locks runtimeLock and loadMethodLock</div><div class=\"line\">**********************************************************************/</div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">bool</span> hasLoadMethods(<span class=\"keyword\">const</span> headerType *mhdr);</div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> prepare_load_methods(<span class=\"keyword\">const</span> headerType *mhdr);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span></div><div class=\"line\">load_images(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *path __unused, <span class=\"keyword\">const</span> <span class=\"keyword\">struct</span> mach_header *mh)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Return without taking locks if there are no +load methods here.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!hasLoadMethods((<span class=\"keyword\">const</span> headerType *)mh)) <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    recursive_mutex_locker_t lock(loadMethodLock);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Discover load methods</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        rwlock_writer_t lock2(runtimeLock);</div><div class=\"line\">        prepare_load_methods((<span class=\"keyword\">const</span> headerType *)mh);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Call +load methods (without runtimeLock - re-entrant)</span></div><div class=\"line\">    call_load_methods();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这里我们可以发现两个关键的方法，prepare_load_methods(…) call_load_methods()</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> prepare_load_methods(<span class=\"keyword\">const</span> headerType *mhdr)</div><div class=\"line\">&#123;</div><div class=\"line\">    size_t count, i;</div><div class=\"line\"></div><div class=\"line\">    runtimeLock.assertWriting();</div><div class=\"line\"></div><div class=\"line\">    classref_t *classlist = </div><div class=\"line\">        _getObjc2NonlazyClassList(mhdr, &amp;count);</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        schedule_class_load(remapClass(classlist[i]));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    category_t **categorylist = _getObjc2NonlazyCategoryList(mhdr, &amp;count);</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        category_t *cat = categorylist[i];</div><div class=\"line\">        Class cls = remapClass(cat-&gt;cls);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!cls) <span class=\"keyword\">continue</span>;  <span class=\"comment\">// category for ignored weak-linked class</span></div><div class=\"line\">        realizeClass(cls);</div><div class=\"line\">        assert(cls-&gt;ISA()-&gt;isRealized());</div><div class=\"line\">        add_category_to_loadable_list(cat);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> schedule_class_load(Class cls)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (cls-&gt;info &amp; <span class=\"built_in\">CLS_LOADED</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (cls-&gt;superclass) schedule_class_load(cls-&gt;superclass);</div><div class=\"line\">    printf(<span class=\"string\">\"%s\\n\\n\"</span>,class_getName(cls));</div><div class=\"line\">    add_class_to_loadable_list(cls);</div><div class=\"line\">    cls-&gt;info |= <span class=\"built_in\">CLS_LOADED</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中我们在void prepare_load_methods(const headerType *mhdr)方法中明显可以看出，先处理Class的相关信息，后处理Category的相关信息，在处理Class时会进入到static void schedule_class_load(Class cls)方法中,在此方法中会递归的寻找到父类，然后调用其add_class_to_loadable_list(cls)的信息</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> add_class_to_loadable_list(Class cls)</div><div class=\"line\">&#123;</div><div class=\"line\">    IMP method;</div><div class=\"line\"></div><div class=\"line\">    loadMethodLock.assertLocked();</div><div class=\"line\"></div><div class=\"line\">    method = cls-&gt;getLoadMethod();</div><div class=\"line\">    <span class=\"keyword\">if</span> (!method) <span class=\"keyword\">return</span>;  <span class=\"comment\">// Don't bother if cls has no +load method</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (PrintLoading) &#123;</div><div class=\"line\">        _objc_inform(<span class=\"string\">\"LOAD: class '%s' scheduled for +load\"</span>, </div><div class=\"line\">                     cls-&gt;nameForLogging());</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (loadable_classes_used == loadable_classes_allocated) &#123;</div><div class=\"line\">        loadable_classes_allocated = loadable_classes_allocated*<span class=\"number\">2</span> + <span class=\"number\">16</span>;</div><div class=\"line\">        loadable_classes = (<span class=\"keyword\">struct</span> loadable_class *)</div><div class=\"line\">            realloc(loadable_classes,</div><div class=\"line\">                              loadable_classes_allocated *</div><div class=\"line\">                              <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> loadable_class));</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    loadable_classes[loadable_classes_used].cls = cls;</div><div class=\"line\">    loadable_classes[loadable_classes_used].method = method;</div><div class=\"line\">    loadable_classes_used++;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这里判断了Class中是否实现了+load方法,若实现了把该Class顺序存储到loadable_classes中,Category同理也调用了相关方法，将实现的load方法的category添加到了list中，如下图</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/***********************************************************************</span></div><div class=\"line\">* add_category_to_loadable_list</div><div class=\"line\">* Category cat's parent class exists and the category has been attached</div><div class=\"line\">* to its class. Schedule this category for +load after its parent class</div><div class=\"line\">* becomes connected and has its own +load method called.</div><div class=\"line\">**********************************************************************/</div><div class=\"line\"><span class=\"keyword\">void</span> add_category_to_loadable_list(Category cat)</div><div class=\"line\">&#123;</div><div class=\"line\">    IMP method;</div><div class=\"line\"></div><div class=\"line\">    loadMethodLock.assertLocked();</div><div class=\"line\"></div><div class=\"line\">    method = _category_getLoadMethod(cat);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Don't bother if cat has no +load method</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!method) <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (PrintLoading) &#123;</div><div class=\"line\">        _objc_inform(<span class=\"string\">\"LOAD: category '%s(%s)' scheduled for +load\"</span>, </div><div class=\"line\">                     _category_getClassName(cat), _category_getName(cat));</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (loadable_categories_used == loadable_categories_allocated) &#123;</div><div class=\"line\">        loadable_categories_allocated = loadable_categories_allocated*<span class=\"number\">2</span> + <span class=\"number\">16</span>;</div><div class=\"line\">        loadable_categories = (<span class=\"keyword\">struct</span> loadable_category *)</div><div class=\"line\">            realloc(loadable_categories,</div><div class=\"line\">                              loadable_categories_allocated *</div><div class=\"line\">                              <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> loadable_category));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    loadable_categories[loadable_categories_used].cat = cat;</div><div class=\"line\">    loadable_categories[loadable_categories_used].method = method;</div><div class=\"line\">    loadable_categories_used++;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>到这里prepare_load_methods(…)这个方法的使命就算结束了，我们找到了可以执行load方法的Class和Category，接下来让我们看一下执行的步骤</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> call_load_methods(<span class=\"keyword\">void</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> loading = <span class=\"literal\">NO</span>;</div><div class=\"line\">    <span class=\"keyword\">bool</span> more_categories;</div><div class=\"line\"></div><div class=\"line\">    loadMethodLock.assertLocked();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Re-entrant calls do nothing; the outermost call will finish the job.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (loading) <span class=\"keyword\">return</span>;</div><div class=\"line\">    loading = <span class=\"literal\">YES</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">void</span> *pool = objc_autoreleasePoolPush();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 1. Repeatedly call class +loads until there aren't any more</span></div><div class=\"line\">        <span class=\"keyword\">while</span> (loadable_classes_used &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            call_class_loads();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 2. Call category +loads ONCE</span></div><div class=\"line\">        more_categories = call_category_loads();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 3. Run more +loads if there are classes OR more untried categories</span></div><div class=\"line\">    &#125; <span class=\"keyword\">while</span> (loadable_classes_used &gt; <span class=\"number\">0</span>  ||  more_categories);</div><div class=\"line\"></div><div class=\"line\">    objc_autoreleasePoolPop(pool);</div><div class=\"line\"></div><div class=\"line\">    loading = <span class=\"literal\">NO</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>关键方法 call_class_loads() call_category_loads(),可以看出是先执行的Class中的load方法，再执行Category中的load方法，下面是两个方法的具体实现</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/***********************************************************************</span></div><div class=\"line\">* call_class_loads</div><div class=\"line\">* Call all pending class +load methods.</div><div class=\"line\">* If new classes become loadable, +load is NOT called for them.</div><div class=\"line\">*</div><div class=\"line\">* Called only by call_load_methods().</div><div class=\"line\">**********************************************************************/</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> call_class_loads(<span class=\"keyword\">void</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Detach current loadable list.</span></div><div class=\"line\">    <span class=\"keyword\">struct</span> loadable_class *classes = loadable_classes;</div><div class=\"line\">    <span class=\"keyword\">int</span> used = loadable_classes_used;</div><div class=\"line\">    loadable_classes = <span class=\"literal\">nil</span>;</div><div class=\"line\">    loadable_classes_allocated = <span class=\"number\">0</span>;</div><div class=\"line\">    loadable_classes_used = <span class=\"number\">0</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Call all +loads for the detached list.</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; used; i++) &#123;</div><div class=\"line\">        Class cls = classes[i].cls;</div><div class=\"line\">        load_method_t load_method = (load_method_t)classes[i].method;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!cls) <span class=\"keyword\">continue</span>; </div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (PrintLoading) &#123;</div><div class=\"line\">            _objc_inform(<span class=\"string\">\"LOAD: +[%s load]\\n\"</span>, cls-&gt;nameForLogging());</div><div class=\"line\">        &#125;</div><div class=\"line\">        (*load_method)(cls, SEL_load);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Destroy the detached list.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (classes) free(classes);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\">/***********************************************************************</div><div class=\"line\">* call_category_loads</div><div class=\"line\">* Call some pending category +load methods.</div><div class=\"line\">* The parent class of the +load-implementing categories has all of </div><div class=\"line\">*   its categories attached, in case some are lazily waiting for +initalize.</div><div class=\"line\">* Don&apos;t call +load unless the parent class is connected.</div><div class=\"line\">* If new categories become loadable, +load is NOT called, and they </div><div class=\"line\">*   are added to the end of the loadable list, and we return TRUE.</div><div class=\"line\">* Return FALSE if no new categories became loadable.</div><div class=\"line\">*</div><div class=\"line\">* Called only by call_load_methods().</div><div class=\"line\">**********************************************************************/</div><div class=\"line\">static bool call_category_loads(void)</div><div class=\"line\">&#123;</div><div class=\"line\">    int i, shift;</div><div class=\"line\">    bool new_categories_added = NO;</div><div class=\"line\">    </div><div class=\"line\">    // Detach current loadable list.</div><div class=\"line\">    struct loadable_category *cats = loadable_categories;</div><div class=\"line\">    int used = loadable_categories_used;</div><div class=\"line\">    int allocated = loadable_categories_allocated;</div><div class=\"line\">    loadable_categories = nil;</div><div class=\"line\">    loadable_categories_allocated = 0;</div><div class=\"line\">    loadable_categories_used = 0;</div><div class=\"line\"></div><div class=\"line\">    // Call all +loads for the detached list.</div><div class=\"line\">    for (i = 0; i &lt; used; i++) &#123;</div><div class=\"line\">        Category cat = cats[i].cat;</div><div class=\"line\">        load_method_t load_method = (load_method_t)cats[i].method;</div><div class=\"line\">        Class cls;</div><div class=\"line\">        if (!cat) continue;</div><div class=\"line\"></div><div class=\"line\">        cls = _category_getClass(cat);</div><div class=\"line\">        if (cls  &amp;&amp;  cls-&gt;isLoadable()) &#123;</div><div class=\"line\">            if (PrintLoading) &#123;</div><div class=\"line\">                _objc_inform(&quot;LOAD: +[%s(%s) load]\\n&quot;, </div><div class=\"line\">                             cls-&gt;nameForLogging(), </div><div class=\"line\">                             _category_getName(cat));</div><div class=\"line\">            &#125;</div><div class=\"line\">            (*load_method)(cls, SEL_load);</div><div class=\"line\">            cats[i].cat = nil;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // Compact detached list (order-preserving)</div><div class=\"line\">    shift = 0;</div><div class=\"line\">    for (i = 0; i &lt; used; i++) &#123;</div><div class=\"line\">        if (cats[i].cat) &#123;</div><div class=\"line\">            cats[i-shift] = cats[i];</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            shift++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    used -= shift;</div><div class=\"line\"></div><div class=\"line\">    // Copy any new +load candidates from the new list to the detached list.</div><div class=\"line\">    new_categories_added = (loadable_categories_used &gt; 0);</div><div class=\"line\">    for (i = 0; i &lt; loadable_categories_used; i++) &#123;</div><div class=\"line\">        if (used == allocated) &#123;</div><div class=\"line\">            allocated = allocated*2 + 16;</div><div class=\"line\">            cats = (struct loadable_category *)</div><div class=\"line\">                realloc(cats, allocated *</div><div class=\"line\">                                  sizeof(struct loadable_category));</div><div class=\"line\">        &#125;</div><div class=\"line\">        cats[used++] = loadable_categories[i];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // Destroy the new list.</div><div class=\"line\">    if (loadable_categories) free(loadable_categories);</div><div class=\"line\"></div><div class=\"line\">    // Reattach the (now augmented) detached list. </div><div class=\"line\">    // But if there&apos;s nothing left to load, destroy the list.</div><div class=\"line\">    if (used) &#123;</div><div class=\"line\">        loadable_categories = cats;</div><div class=\"line\">        loadable_categories_used = used;</div><div class=\"line\">        loadable_categories_allocated = allocated;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        if (cats) free(cats);</div><div class=\"line\">        loadable_categories = nil;</div><div class=\"line\">        loadable_categories_used = 0;</div><div class=\"line\">        loadable_categories_allocated = 0;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if (PrintLoading) &#123;</div><div class=\"line\">        if (loadable_categories_used != 0) &#123;</div><div class=\"line\">            _objc_inform(&quot;LOAD: %d categories still waiting for +load\\n&quot;,</div><div class=\"line\">                         loadable_categories_used);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return new_categories_added;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>+load方法通过函数指针调用，而不是objc_msgSend<br>+load方法的调用时机是在Runtime初始化的时候，其中的调用顺序是父类-&gt;子类-&gt;分类，其中默认调用一次，在Class中和Category中都实现了load方法，则在两者之间都会调用，且在子类实现+load方法时不需要显示的调用[super load]</p>\n","excerpt":"","more":"<p>受益于苹果的封闭生态，开发者常常不必关注太多的底层细节，就能做出界面美观，性能优良的App，当然其中Apple也大方的开放出了少许的源码，例如Runtime源码,感谢<a href=\"http://blog.csdn.net/wotors/article/details/54426316\">http://blog.csdn.net/wotors/article/details/54426316</a> 提供了可以编译成功的源码工程。</p>\n<h2 id=\"load\"><a href=\"#load\" class=\"headerlink\" title=\"+load()\"></a>+load()</h2><p>我们来通过源码来探讨一下load方法的加载时机，和在父类，Category中的加载顺序</p>\n<p>首先我们在+load方法中打上断点，看到如下的执行过程</p>\n<p><img src=\"http://omhkfini5.bkt.clouddn.com/load.jpg\" alt=\"\"></p>\n<p>通过runtime的源码我们可以找到load_images方法的具体实现，代码如下</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/***********************************************************************</div><div class=\"line\">* load_images</div><div class=\"line\">* Process +load in the given images which are being mapped in by dyld.</div><div class=\"line\">*</div><div class=\"line\">* Locking: write-locks runtimeLock and loadMethodLock</div><div class=\"line\">**********************************************************************/</span></div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">bool</span> hasLoadMethods(<span class=\"keyword\">const</span> headerType *mhdr);</div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> prepare_load_methods(<span class=\"keyword\">const</span> headerType *mhdr);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span></div><div class=\"line\">load_images(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *path __unused, <span class=\"keyword\">const</span> <span class=\"keyword\">struct</span> mach_header *mh)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Return without taking locks if there are no +load methods here.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!hasLoadMethods((<span class=\"keyword\">const</span> headerType *)mh)) <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    recursive_mutex_locker_t lock(loadMethodLock);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Discover load methods</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        rwlock_writer_t lock2(runtimeLock);</div><div class=\"line\">        prepare_load_methods((<span class=\"keyword\">const</span> headerType *)mh);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Call +load methods (without runtimeLock - re-entrant)</span></div><div class=\"line\">    call_load_methods();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这里我们可以发现两个关键的方法，prepare_load_methods(…) call_load_methods()</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> prepare_load_methods(<span class=\"keyword\">const</span> headerType *mhdr)</div><div class=\"line\">&#123;</div><div class=\"line\">    size_t count, i;</div><div class=\"line\"></div><div class=\"line\">    runtimeLock.assertWriting();</div><div class=\"line\"></div><div class=\"line\">    classref_t *classlist = </div><div class=\"line\">        _getObjc2NonlazyClassList(mhdr, &amp;count);</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        schedule_class_load(remapClass(classlist[i]));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    category_t **categorylist = _getObjc2NonlazyCategoryList(mhdr, &amp;count);</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        category_t *cat = categorylist[i];</div><div class=\"line\">        Class cls = remapClass(cat-&gt;cls);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!cls) <span class=\"keyword\">continue</span>;  <span class=\"comment\">// category for ignored weak-linked class</span></div><div class=\"line\">        realizeClass(cls);</div><div class=\"line\">        assert(cls-&gt;ISA()-&gt;isRealized());</div><div class=\"line\">        add_category_to_loadable_list(cat);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> schedule_class_load(Class cls)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (cls-&gt;info &amp; <span class=\"built_in\">CLS_LOADED</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (cls-&gt;superclass) schedule_class_load(cls-&gt;superclass);</div><div class=\"line\">    printf(<span class=\"string\">\"%s\\n\\n\"</span>,class_getName(cls));</div><div class=\"line\">    add_class_to_loadable_list(cls);</div><div class=\"line\">    cls-&gt;info |= <span class=\"built_in\">CLS_LOADED</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中我们在void prepare_load_methods(const headerType *mhdr)方法中明显可以看出，先处理Class的相关信息，后处理Category的相关信息，在处理Class时会进入到static void schedule_class_load(Class cls)方法中,在此方法中会递归的寻找到父类，然后调用其add_class_to_loadable_list(cls)的信息</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> add_class_to_loadable_list(Class cls)</div><div class=\"line\">&#123;</div><div class=\"line\">    IMP method;</div><div class=\"line\"></div><div class=\"line\">    loadMethodLock.assertLocked();</div><div class=\"line\"></div><div class=\"line\">    method = cls-&gt;getLoadMethod();</div><div class=\"line\">    <span class=\"keyword\">if</span> (!method) <span class=\"keyword\">return</span>;  <span class=\"comment\">// Don't bother if cls has no +load method</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (PrintLoading) &#123;</div><div class=\"line\">        _objc_inform(<span class=\"string\">\"LOAD: class '%s' scheduled for +load\"</span>, </div><div class=\"line\">                     cls-&gt;nameForLogging());</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (loadable_classes_used == loadable_classes_allocated) &#123;</div><div class=\"line\">        loadable_classes_allocated = loadable_classes_allocated*<span class=\"number\">2</span> + <span class=\"number\">16</span>;</div><div class=\"line\">        loadable_classes = (<span class=\"keyword\">struct</span> loadable_class *)</div><div class=\"line\">            realloc(loadable_classes,</div><div class=\"line\">                              loadable_classes_allocated *</div><div class=\"line\">                              <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> loadable_class));</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    loadable_classes[loadable_classes_used].cls = cls;</div><div class=\"line\">    loadable_classes[loadable_classes_used].method = method;</div><div class=\"line\">    loadable_classes_used++;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这里判断了Class中是否实现了+load方法,若实现了把该Class顺序存储到loadable_classes中,Category同理也调用了相关方法，将实现的load方法的category添加到了list中，如下图</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/***********************************************************************</div><div class=\"line\">* add_category_to_loadable_list</div><div class=\"line\">* Category cat's parent class exists and the category has been attached</div><div class=\"line\">* to its class. Schedule this category for +load after its parent class</div><div class=\"line\">* becomes connected and has its own +load method called.</div><div class=\"line\">**********************************************************************/</span></div><div class=\"line\"><span class=\"keyword\">void</span> add_category_to_loadable_list(Category cat)</div><div class=\"line\">&#123;</div><div class=\"line\">    IMP method;</div><div class=\"line\"></div><div class=\"line\">    loadMethodLock.assertLocked();</div><div class=\"line\"></div><div class=\"line\">    method = _category_getLoadMethod(cat);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Don't bother if cat has no +load method</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!method) <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (PrintLoading) &#123;</div><div class=\"line\">        _objc_inform(<span class=\"string\">\"LOAD: category '%s(%s)' scheduled for +load\"</span>, </div><div class=\"line\">                     _category_getClassName(cat), _category_getName(cat));</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (loadable_categories_used == loadable_categories_allocated) &#123;</div><div class=\"line\">        loadable_categories_allocated = loadable_categories_allocated*<span class=\"number\">2</span> + <span class=\"number\">16</span>;</div><div class=\"line\">        loadable_categories = (<span class=\"keyword\">struct</span> loadable_category *)</div><div class=\"line\">            realloc(loadable_categories,</div><div class=\"line\">                              loadable_categories_allocated *</div><div class=\"line\">                              <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> loadable_category));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    loadable_categories[loadable_categories_used].cat = cat;</div><div class=\"line\">    loadable_categories[loadable_categories_used].method = method;</div><div class=\"line\">    loadable_categories_used++;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>到这里prepare_load_methods(…)这个方法的使命就算结束了，我们找到了可以执行load方法的Class和Category，接下来让我们看一下执行的步骤</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> call_load_methods(<span class=\"keyword\">void</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> loading = <span class=\"literal\">NO</span>;</div><div class=\"line\">    <span class=\"keyword\">bool</span> more_categories;</div><div class=\"line\"></div><div class=\"line\">    loadMethodLock.assertLocked();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Re-entrant calls do nothing; the outermost call will finish the job.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (loading) <span class=\"keyword\">return</span>;</div><div class=\"line\">    loading = <span class=\"literal\">YES</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">void</span> *pool = objc_autoreleasePoolPush();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 1. Repeatedly call class +loads until there aren't any more</span></div><div class=\"line\">        <span class=\"keyword\">while</span> (loadable_classes_used &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            call_class_loads();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 2. Call category +loads ONCE</span></div><div class=\"line\">        more_categories = call_category_loads();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 3. Run more +loads if there are classes OR more untried categories</span></div><div class=\"line\">    &#125; <span class=\"keyword\">while</span> (loadable_classes_used &gt; <span class=\"number\">0</span>  ||  more_categories);</div><div class=\"line\"></div><div class=\"line\">    objc_autoreleasePoolPop(pool);</div><div class=\"line\"></div><div class=\"line\">    loading = <span class=\"literal\">NO</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>关键方法 call_class_loads() call_category_loads(),可以看出是先执行的Class中的load方法，再执行Category中的load方法，下面是两个方法的具体实现</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/***********************************************************************</div><div class=\"line\">* call_class_loads</div><div class=\"line\">* Call all pending class +load methods.</div><div class=\"line\">* If new classes become loadable, +load is NOT called for them.</div><div class=\"line\">*</div><div class=\"line\">* Called only by call_load_methods().</div><div class=\"line\">**********************************************************************/</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> call_class_loads(<span class=\"keyword\">void</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Detach current loadable list.</span></div><div class=\"line\">    <span class=\"keyword\">struct</span> loadable_class *classes = loadable_classes;</div><div class=\"line\">    <span class=\"keyword\">int</span> used = loadable_classes_used;</div><div class=\"line\">    loadable_classes = <span class=\"literal\">nil</span>;</div><div class=\"line\">    loadable_classes_allocated = <span class=\"number\">0</span>;</div><div class=\"line\">    loadable_classes_used = <span class=\"number\">0</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Call all +loads for the detached list.</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; used; i++) &#123;</div><div class=\"line\">        Class cls = classes[i].cls;</div><div class=\"line\">        load_method_t load_method = (load_method_t)classes[i].method;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!cls) <span class=\"keyword\">continue</span>; </div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (PrintLoading) &#123;</div><div class=\"line\">            _objc_inform(<span class=\"string\">\"LOAD: +[%s load]\\n\"</span>, cls-&gt;nameForLogging());</div><div class=\"line\">        &#125;</div><div class=\"line\">        (*load_method)(cls, SEL_load);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Destroy the detached list.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (classes) free(classes);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\">/***********************************************************************</div><div class=\"line\">* call_category_loads</div><div class=\"line\">* Call some pending category +load methods.</div><div class=\"line\">* The parent class of the +load-implementing categories has all of </div><div class=\"line\">*   its categories attached, in case some are lazily waiting for +initalize.</div><div class=\"line\">* Don&apos;t call +load unless the parent class is connected.</div><div class=\"line\">* If new categories become loadable, +load is NOT called, and they </div><div class=\"line\">*   are added to the end of the loadable list, and we return TRUE.</div><div class=\"line\">* Return FALSE if no new categories became loadable.</div><div class=\"line\">*</div><div class=\"line\">* Called only by call_load_methods().</div><div class=\"line\">**********************************************************************/</div><div class=\"line\">static bool call_category_loads(void)</div><div class=\"line\">&#123;</div><div class=\"line\">    int i, shift;</div><div class=\"line\">    bool new_categories_added = NO;</div><div class=\"line\">    </div><div class=\"line\">    // Detach current loadable list.</div><div class=\"line\">    struct loadable_category *cats = loadable_categories;</div><div class=\"line\">    int used = loadable_categories_used;</div><div class=\"line\">    int allocated = loadable_categories_allocated;</div><div class=\"line\">    loadable_categories = nil;</div><div class=\"line\">    loadable_categories_allocated = 0;</div><div class=\"line\">    loadable_categories_used = 0;</div><div class=\"line\"></div><div class=\"line\">    // Call all +loads for the detached list.</div><div class=\"line\">    for (i = 0; i &lt; used; i++) &#123;</div><div class=\"line\">        Category cat = cats[i].cat;</div><div class=\"line\">        load_method_t load_method = (load_method_t)cats[i].method;</div><div class=\"line\">        Class cls;</div><div class=\"line\">        if (!cat) continue;</div><div class=\"line\"></div><div class=\"line\">        cls = _category_getClass(cat);</div><div class=\"line\">        if (cls  &amp;&amp;  cls-&gt;isLoadable()) &#123;</div><div class=\"line\">            if (PrintLoading) &#123;</div><div class=\"line\">                _objc_inform(&quot;LOAD: +[%s(%s) load]\\n&quot;, </div><div class=\"line\">                             cls-&gt;nameForLogging(), </div><div class=\"line\">                             _category_getName(cat));</div><div class=\"line\">            &#125;</div><div class=\"line\">            (*load_method)(cls, SEL_load);</div><div class=\"line\">            cats[i].cat = nil;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // Compact detached list (order-preserving)</div><div class=\"line\">    shift = 0;</div><div class=\"line\">    for (i = 0; i &lt; used; i++) &#123;</div><div class=\"line\">        if (cats[i].cat) &#123;</div><div class=\"line\">            cats[i-shift] = cats[i];</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            shift++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    used -= shift;</div><div class=\"line\"></div><div class=\"line\">    // Copy any new +load candidates from the new list to the detached list.</div><div class=\"line\">    new_categories_added = (loadable_categories_used &gt; 0);</div><div class=\"line\">    for (i = 0; i &lt; loadable_categories_used; i++) &#123;</div><div class=\"line\">        if (used == allocated) &#123;</div><div class=\"line\">            allocated = allocated*2 + 16;</div><div class=\"line\">            cats = (struct loadable_category *)</div><div class=\"line\">                realloc(cats, allocated *</div><div class=\"line\">                                  sizeof(struct loadable_category));</div><div class=\"line\">        &#125;</div><div class=\"line\">        cats[used++] = loadable_categories[i];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // Destroy the new list.</div><div class=\"line\">    if (loadable_categories) free(loadable_categories);</div><div class=\"line\"></div><div class=\"line\">    // Reattach the (now augmented) detached list. </div><div class=\"line\">    // But if there&apos;s nothing left to load, destroy the list.</div><div class=\"line\">    if (used) &#123;</div><div class=\"line\">        loadable_categories = cats;</div><div class=\"line\">        loadable_categories_used = used;</div><div class=\"line\">        loadable_categories_allocated = allocated;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        if (cats) free(cats);</div><div class=\"line\">        loadable_categories = nil;</div><div class=\"line\">        loadable_categories_used = 0;</div><div class=\"line\">        loadable_categories_allocated = 0;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if (PrintLoading) &#123;</div><div class=\"line\">        if (loadable_categories_used != 0) &#123;</div><div class=\"line\">            _objc_inform(&quot;LOAD: %d categories still waiting for +load\\n&quot;,</div><div class=\"line\">                         loadable_categories_used);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return new_categories_added;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>+load方法通过函数指针调用，而不是objc_msgSend<br>+load方法的调用时机是在Runtime初始化的时候，其中的调用顺序是父类-&gt;子类-&gt;分类，其中默认调用一次，在Class中和Category中都实现了load方法，则在两者之间都会调用，且在子类实现+load方法时不需要显示的调用[super load]</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj1d1x33w0001p36dc0bgevu8","category_id":"cj1d1x3460005p36dcffermm1","_id":"cj1d1x34c000bp36do9jgtjxc"},{"post_id":"cj1d1x3420003p36dibg7cbkf","category_id":"cj1d1x34b0008p36dppx3cowl","_id":"cj1d1x34c000dp36d2amro2rv"}],"PostTag":[{"post_id":"cj1d1x33w0001p36dc0bgevu8","tag_id":"cj1d1x3480006p36d1w2t5rqq","_id":"cj1d1x34b000ap36d5i23g4zj"},{"post_id":"cj1d1x3420003p36dibg7cbkf","tag_id":"cj1d1x34b0009p36dh4pal6l6","_id":"cj1d1x34d000fp36df625t6my"},{"post_id":"cj1d1x3420003p36dibg7cbkf","tag_id":"cj1d1x34c000cp36dfa2runni","_id":"cj1d1x34e000gp36dh66scj7p"},{"post_id":"cj1d1x3490007p36d3vkljcku","tag_id":"cj1d1x34b0009p36dh4pal6l6","_id":"cj1d1x34e000hp36d6dkin3xo"}],"Tag":[{"name":"Hello World","_id":"cj1d1x3480006p36d1w2t5rqq"},{"name":"iOS","_id":"cj1d1x34b0009p36dh4pal6l6"},{"name":"Runtime","_id":"cj1d1x34c000cp36dfa2runni"}]}}